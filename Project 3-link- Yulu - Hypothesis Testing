{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/iamazadak/Project_Portfolio/blob/main/Project%203-link-%20Yulu%20-%20Hypothesis%20Testing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  Yulu - Hypothesis Testing\n",
        "\n",
        "- Submitted by Anand Azad\n",
        "- Feel free to provide feedback for any improvement."
      ],
      "metadata": {
        "id": "fgOcFIRoUW91"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# About Yulu\n",
        "\n",
        "* Yulu is India’s leading micro-mobility service provider,\n",
        "which offers unique vehicles for the daily commute. Starting off as a mission to eliminate traffic congestion in India, Yulu provides the safest commute solution through a user-friendly mobile app to enable shared, solo and sustainable commuting.\n",
        "\n",
        "* Yulu zones are located at all the appropriate location(including metro stations, bus stands, office spaces, residential areas, corporate offices, etc) to make those first and last miles smooth, affordable, and convenient!\n",
        "\n",
        "# Business Problem\n",
        "\n",
        "* Yulu has recently suffered considerable dips in its revenues. They have contracted a consulting company to understand the factors on which the demand for these shared electric cycles depends. Specifically, they want to understand the factors affecting the demand for these shared electric cycles in the Indian market."
      ],
      "metadata": {
        "id": "DS1BeXbzNiDd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Yulu : Hypothesis Testing\n",
        "## Recommendations.\n",
        "\n",
        "* On rainy weather Yulu has least cycle renting counts, hence Yulu should focus more incase of increasing counts on rainy weathers.\n",
        "* A cyclical trend can be noticed between 2011 and 2012 data, based on which it seems all jan, feb, march possess least cycle renting counts and the factors behind this is windspeed above 22,\n",
        "high humidity.\n",
        "* High variance of humidity can cause low user count, as it can be seen that 2012 have lower variance than 2011 with high user count.\n",
        "* By taking above weather factors Yulu's user counts can be roughly predicted and Yulu should focus in it.\n",
        "* As january fridays and february mondays have least probability of 6 % each of renting electric cycles, Yulu should focus on this.\n",
        "* Yulu should focus on increasing user counts on mist cloudy, light rainy snowy, heavy rainy weather,as these weathers has only 35 % probability of renting electric cycles.\n",
        "\n",
        "\n",
        "## Insights.\n",
        "* From advanced statistical tests it can be concluded that renting electric cycles in working day is not equal to non-working day.\n",
        "* From advanced statistical tests it can be concluded that no of cycles renting is not similar in different weathers.\n",
        "* From advanced statistical tests it can be concluded that no of cycles renting is not similar in different seasons.\n",
        "* From advanced statistical tests it can be concluded that weathers and seasons are dependent.\n",
        "* Registerd users are almost double than casual users.\n",
        "* Least elctric cycle renting can be seen on heavy rainy weather.\n",
        "* Maximum electric cycle renting can be seen on clear cloudy weather.\n",
        "* On clear cloudy weather all four seasons have above 60 % of probability of renting electric cycles.\n",
        "* On heavy rainy weather all four seasons have 0 % of probability of renting electric cycles.\n",
        "* On mist cloudy weather all four seasons have between 20 - 30 % of probability of renting electric cycles.\n",
        "* On light snowy rainy weather all four seasons have nearly 10 % of probability of renting electric cycles.\n",
        "* Trends are cyclical in nature as we can observe both the least active months are at the starting and specifically January.\n",
        "* In both the year peak of active users were between June - July.\n",
        "* Drastic increase of users in the begining of the year uptill June and July.\n",
        "* Most suitable weather for yulu bike rent business is clear cloud weather, as it attracts most of their user ie on an average 205 users.\n",
        "* Yulu should focus on their business at heavy rainy weather, as it has the least user count with 1 user.\n",
        "* Top 95% users for weather 1 lies between 202 - 207 approx.\n",
        "* Top 95% users for weather 2 lies between 175 - 182 approx.\n",
        "* Top 95% users for weather 3 lies between 114 - 123 approx.\n",
        "* Casual users decreases at workingdays.\n",
        "* Casual users decreases as humidity increases.\n",
        "* Casual users increases as atemp increases.\n",
        "* Casual users increases as temp increases.\n",
        "* Registered users decreases as humidity increases.\n",
        "* Count of users slightly decreases as weather increases.\n",
        "* Count of users increases as atemp increases.\n",
        "* Count of users increases as temp increases.\n",
        "* Registered users increases as casual users increases.\n",
        "* From may to october Yulu sees a stable rate of electric cycle renting."
      ],
      "metadata": {
        "id": "ow4-R9NAOlIj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Important Notes\n",
        "\n",
        "* season:\n",
        "  1. spring\n",
        "  2. summer\n",
        "  3. fall\n",
        "  4. winter\n",
        "\n",
        "* weather:\n",
        "  1. Clear, Few clouds, partly cloudy\n",
        "  2. Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n",
        "  3. Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n",
        "  4. Heaby Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n",
        "  "
      ],
      "metadata": {
        "id": "XrN5VNmePYHP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Project Starts Here!\n",
        "\n",
        "## All the codes, plots, statistical tests, observations are done below."
      ],
      "metadata": {
        "id": "mbIhTduYQb4d"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Installing important libraries."
      ],
      "metadata": {
        "id": "Rr7PwrESUlFB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install sorted_months_weekdays"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Bv0hjwDnoWo",
        "outputId": "169401c6-6acf-4523-b69a-0a02bf2ff039"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting sorted_months_weekdays\n",
            "  Downloading sorted_months_weekdays-0.2.tar.gz (2.7 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: sorted_months_weekdays\n",
            "  Building wheel for sorted_months_weekdays (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sorted_months_weekdays: filename=sorted_months_weekdays-0.2-py3-none-any.whl size=3224 sha256=9fde8fc9ce9e6f7d28e010d9291295ad90402918080f359266d8735958a7d3ba\n",
            "  Stored in directory: /root/.cache/pip/wheels/bd/b4/f6/2c29a96668a9a13a568134857fd7b7a5186261f00f1d35661c\n",
            "Successfully built sorted_months_weekdays\n",
            "Installing collected packages: sorted_months_weekdays\n",
            "Successfully installed sorted_months_weekdays-0.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install sort_dataframeby_monthorweek"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q0eBcld4ntOf",
        "outputId": "581242aa-2a01-4132-8cdb-7a34f5386894"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting sort_dataframeby_monthorweek\n",
            "  Downloading sort_dataframeby_monthorweek-0.4.tar.gz (2.8 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: sort_dataframeby_monthorweek\n",
            "  Building wheel for sort_dataframeby_monthorweek (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sort_dataframeby_monthorweek: filename=sort_dataframeby_monthorweek-0.4-py3-none-any.whl size=3420 sha256=096394d6b9b46b282798da82c2bae04f752dfea741392e77a7755e0abe5fdf6b\n",
            "  Stored in directory: /root/.cache/pip/wheels/6b/fd/39/06eaac8d65d641f9f50856a48b57a5ec8351be2874beff01ec\n",
            "Successfully built sort_dataframeby_monthorweek\n",
            "Installing collected packages: sort_dataframeby_monthorweek\n",
            "Successfully installed sort_dataframeby_monthorweek-0.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install bioinfokit"
      ],
      "metadata": {
        "id": "SjkupSh2n_tp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6821f348-c8ae-4df0-9a81-697f3939ad52"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting bioinfokit\n",
            "  Downloading bioinfokit-2.1.3.tar.gz (87 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/87.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m87.7/87.7 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (1.5.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (1.25.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (3.7.1)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (1.11.4)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (1.2.2)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (0.13.1)\n",
            "Requirement already satisfied: matplotlib-venn in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (0.11.10)\n",
            "Requirement already satisfied: tabulate in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (0.9.0)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from bioinfokit) (0.14.1)\n",
            "Collecting textwrap3 (from bioinfokit)\n",
            "  Downloading textwrap3-0.9.2-py2.py3-none-any.whl (12 kB)\n",
            "Collecting adjustText (from bioinfokit)\n",
            "  Downloading adjustText-1.0.4-py3-none-any.whl (11 kB)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (4.49.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->bioinfokit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->bioinfokit) (2023.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->bioinfokit) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->bioinfokit) (3.3.0)\n",
            "Requirement already satisfied: patsy>=0.5.4 in /usr/local/lib/python3.10/dist-packages (from statsmodels->bioinfokit) (0.5.6)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.4->statsmodels->bioinfokit) (1.16.0)\n",
            "Building wheels for collected packages: bioinfokit\n",
            "  Building wheel for bioinfokit (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for bioinfokit: filename=bioinfokit-2.1.3-py3-none-any.whl size=59056 sha256=c044b6c88b9efb730bf1733e2c6ad012764a533cda4e65df38346bb3dca6813c\n",
            "  Stored in directory: /root/.cache/pip/wheels/ac/67/a7/4e0b4172d5415933127e819d7d7080ae08a6220949ad2f6de5\n",
            "Successfully built bioinfokit\n",
            "Installing collected packages: textwrap3, adjustText, bioinfokit\n",
            "Successfully installed adjustText-1.0.4 bioinfokit-2.1.3 textwrap3-0.9.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "jGKzcf7Yspq7"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "from scipy.stats import norm\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from numpy.random import seed\n",
        "from numpy.random import randint\n",
        "from numpy import mean\n",
        "from sklearn.utils import resample\n",
        "from sklearn.metrics import accuracy_score\n",
        "import warnings\n",
        "import datetime as dt\n",
        "from sorted_months_weekdays import *\n",
        "from sort_dataframeby_monthorweek import *\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "import statsmodels.api as sm\n",
        "from bioinfokit.analys import stat"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yulu = pd.read_csv('/content/yulu_bike_sharing.csv')\n",
        "df = pd.read_csv('/content/yulu_bike_sharing.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "id": "ocC_3zwNRolc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "c69dec77-0483-4e13-d7b3-e52e723a6b9c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              datetime  season  holiday  workingday  weather  temp   atemp  \\\n",
              "0  2011-01-01 00:00:00       1        0           0        1  9.84  14.395   \n",
              "1  2011-01-01 01:00:00       1        0           0        1  9.02  13.635   \n",
              "2  2011-01-01 02:00:00       1        0           0        1  9.02  13.635   \n",
              "3  2011-01-01 03:00:00       1        0           0        1  9.84  14.395   \n",
              "4  2011-01-01 04:00:00       1        0           0        1  9.84  14.395   \n",
              "\n",
              "   humidity  windspeed  casual  registered  count  \n",
              "0        81        0.0       3          13     16  \n",
              "1        80        0.0       8          32     40  \n",
              "2        80        0.0       5          27     32  \n",
              "3        75        0.0       3          10     13  \n",
              "4        75        0.0       0           1      1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-97cd1432-4444-47b2-8639-95a67636e2df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-01 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-01 01:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-01 02:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-01-01 03:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-01-01 04:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97cd1432-4444-47b2-8639-95a67636e2df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-97cd1432-4444-47b2-8639-95a67636e2df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-97cd1432-4444-47b2-8639-95a67636e2df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5cf22683-c192-4c54-8845-63c0b9c4d041\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5cf22683-c192-4c54-8845-63c0b9c4d041')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5cf22683-c192-4c54-8845-63c0b9c4d041 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10886,\n  \"fields\": [\n    {\n      \"column\": \"datetime\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 10886,\n        \"samples\": [\n          \"2011-07-19 11:00:00\",\n          \"2012-01-16 06:00:00\",\n          \"2011-12-11 18:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.791589843987567,\n        \"min\": 0.82,\n        \"max\": 41.0,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          6.56,\n          1.64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.474600626484948,\n        \"min\": 0.76,\n        \"max\": 45.455,\n        \"num_unique_values\": 60,\n        \"samples\": [\n          14.395,\n          16.665\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          29,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.164537326838689,\n        \"min\": 0.0,\n        \"max\": 56.9969,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          22.0028,\n          43.0006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 0,\n        \"max\": 367,\n        \"num_unique_values\": 309,\n        \"samples\": [\n          287,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 151,\n        \"min\": 0,\n        \"max\": 886,\n        \"num_unique_values\": 731,\n        \"samples\": [\n          566,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181,\n        \"min\": 1,\n        \"max\": 977,\n        \"num_unique_values\": 822,\n        \"samples\": [\n          626,\n          256\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yulu.shape"
      ],
      "metadata": {
        "id": "1Xlr2BQBVDv5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec52997b-8e74-4921-919e-a9c1165b2095"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10886, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "p2k_QuI5VNJw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05ad2486-53b2-4220-ca5f-69454dddd0f4"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10886 entries, 0 to 10885\n",
            "Data columns (total 12 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   datetime    10886 non-null  object \n",
            " 1   season      10886 non-null  int64  \n",
            " 2   holiday     10886 non-null  int64  \n",
            " 3   workingday  10886 non-null  int64  \n",
            " 4   weather     10886 non-null  int64  \n",
            " 5   temp        10886 non-null  float64\n",
            " 6   atemp       10886 non-null  float64\n",
            " 7   humidity    10886 non-null  int64  \n",
            " 8   windspeed   10886 non-null  float64\n",
            " 9   casual      10886 non-null  int64  \n",
            " 10  registered  10886 non-null  int64  \n",
            " 11  count       10886 non-null  int64  \n",
            "dtypes: float64(3), int64(8), object(1)\n",
            "memory usage: 1020.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Getting the stats for integer and float data types\n",
        "df.describe(include=['int64','float64'])"
      ],
      "metadata": {
        "id": "C6qiKBmGVQQa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "80b327b5-c12b-435a-88db-cb9433178521"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             season       holiday    workingday       weather         temp  \\\n",
              "count  10886.000000  10886.000000  10886.000000  10886.000000  10886.00000   \n",
              "mean       2.506614      0.028569      0.680875      1.418427     20.23086   \n",
              "std        1.116174      0.166599      0.466159      0.633839      7.79159   \n",
              "min        1.000000      0.000000      0.000000      1.000000      0.82000   \n",
              "25%        2.000000      0.000000      0.000000      1.000000     13.94000   \n",
              "50%        3.000000      0.000000      1.000000      1.000000     20.50000   \n",
              "75%        4.000000      0.000000      1.000000      2.000000     26.24000   \n",
              "max        4.000000      1.000000      1.000000      4.000000     41.00000   \n",
              "\n",
              "              atemp      humidity     windspeed        casual    registered  \\\n",
              "count  10886.000000  10886.000000  10886.000000  10886.000000  10886.000000   \n",
              "mean      23.655084     61.886460     12.799395     36.021955    155.552177   \n",
              "std        8.474601     19.245033      8.164537     49.960477    151.039033   \n",
              "min        0.760000      0.000000      0.000000      0.000000      0.000000   \n",
              "25%       16.665000     47.000000      7.001500      4.000000     36.000000   \n",
              "50%       24.240000     62.000000     12.998000     17.000000    118.000000   \n",
              "75%       31.060000     77.000000     16.997900     49.000000    222.000000   \n",
              "max       45.455000    100.000000     56.996900    367.000000    886.000000   \n",
              "\n",
              "              count  \n",
              "count  10886.000000  \n",
              "mean     191.574132  \n",
              "std      181.144454  \n",
              "min        1.000000  \n",
              "25%       42.000000  \n",
              "50%      145.000000  \n",
              "75%      284.000000  \n",
              "max      977.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d4c9222f-0c8a-46d5-8c6f-468d805247bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.00000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "      <td>10886.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.506614</td>\n",
              "      <td>0.028569</td>\n",
              "      <td>0.680875</td>\n",
              "      <td>1.418427</td>\n",
              "      <td>20.23086</td>\n",
              "      <td>23.655084</td>\n",
              "      <td>61.886460</td>\n",
              "      <td>12.799395</td>\n",
              "      <td>36.021955</td>\n",
              "      <td>155.552177</td>\n",
              "      <td>191.574132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.116174</td>\n",
              "      <td>0.166599</td>\n",
              "      <td>0.466159</td>\n",
              "      <td>0.633839</td>\n",
              "      <td>7.79159</td>\n",
              "      <td>8.474601</td>\n",
              "      <td>19.245033</td>\n",
              "      <td>8.164537</td>\n",
              "      <td>49.960477</td>\n",
              "      <td>151.039033</td>\n",
              "      <td>181.144454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.82000</td>\n",
              "      <td>0.760000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>13.94000</td>\n",
              "      <td>16.665000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>7.001500</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>42.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>20.50000</td>\n",
              "      <td>24.240000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>12.998000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>118.000000</td>\n",
              "      <td>145.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>26.24000</td>\n",
              "      <td>31.060000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>16.997900</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>222.000000</td>\n",
              "      <td>284.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>41.00000</td>\n",
              "      <td>45.455000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>56.996900</td>\n",
              "      <td>367.000000</td>\n",
              "      <td>886.000000</td>\n",
              "      <td>977.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4c9222f-0c8a-46d5-8c6f-468d805247bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d4c9222f-0c8a-46d5-8c6f-468d805247bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d4c9222f-0c8a-46d5-8c6f-468d805247bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a5a7aa17-ff4d-4430-a357-a85e8b6a695a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5a7aa17-ff4d-4430-a357-a85e8b6a695a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a5a7aa17-ff4d-4430-a357-a85e8b6a695a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3847.8922948663444,\n        \"min\": 1.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          10886.0,\n          2.5066139996325556,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3848.7218602181274,\n        \"min\": 0.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.02856880396839978,\n          1.0,\n          0.16659885062470958\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3848.5727758849685,\n        \"min\": 0.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6808745177291935,\n          1.0,\n          0.4661591687997356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3848.224134081727,\n        \"min\": 0.6338385858190958,\n        \"max\": 10886.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          10886.0,\n          1.418427337865148,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3842.208812643129,\n        \"min\": 0.82,\n        \"max\": 10886.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          20.23085981995223,\n          20.5,\n          10886.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3841.214609020895,\n        \"min\": 0.76,\n        \"max\": 10886.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23.655084052912,\n          24.24,\n          10886.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3830.3684503021896,\n        \"min\": 0.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          61.88645967297446,\n          62.0,\n          10886.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3843.014939445678,\n        \"min\": 0.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.7993954069447,\n          12.998,\n          10886.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3824.2753676913135,\n        \"min\": 0.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          36.02195480433584,\n          17.0,\n          10886.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3779.869612125704,\n        \"min\": 0.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          155.5521771082124,\n          118.0,\n          10886.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3769.174237043881,\n        \"min\": 1.0,\n        \"max\": 10886.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          191.57413191254824,\n          145.0,\n          10886.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Getting the stats for object data types\n",
        "df.describe(include='object')"
      ],
      "metadata": {
        "id": "YH2rB6q1GXwQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "b9908f75-c9b4-4fa8-cd52-b7165da858b6"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   datetime\n",
              "count                 10886\n",
              "unique                10886\n",
              "top     2011-01-01 00:00:00\n",
              "freq                      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fdd10620-4372-4937-a676-bb5cdb9a29ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10886</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>10886</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>2011-01-01 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fdd10620-4372-4937-a676-bb5cdb9a29ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fdd10620-4372-4937-a676-bb5cdb9a29ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fdd10620-4372-4937-a676-bb5cdb9a29ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1a759f15-7076-43f2-ab2d-a9a400ee95b1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a759f15-7076-43f2-ab2d-a9a400ee95b1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1a759f15-7076-43f2-ab2d-a9a400ee95b1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"datetime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000000001\",\n        \"max\": \"2011-01-01 00:00:00\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"10886\",\n          \"2011-01-01 00:00:00\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#yulu['datetime'] = yulu['datetime'].astype('datetime64[ns]')\n",
        "yulu['datetime'] = pd.to_datetime(yulu['datetime'])\n",
        "df['datetime'] = pd.to_datetime(df['datetime'])\n",
        "df['year'] = df.datetime.dt.strftime('%Y')\n",
        "df['date'] = df.datetime.dt.strftime('%d')\n",
        "df['month'] = df.datetime.dt.strftime('%B')\n",
        "df['day'] = df.datetime.dt.strftime('%a')\n",
        "yulu.nunique()\n",
        "#df.head()"
      ],
      "metadata": {
        "id": "wvZ60XIGdrp1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f0189b90-c12c-4f79-a633-343d053cbee6"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime      10886\n",
              "season            4\n",
              "holiday           2\n",
              "workingday        2\n",
              "weather           4\n",
              "temp             49\n",
              "atemp            60\n",
              "humidity         89\n",
              "windspeed        28\n",
              "casual          309\n",
              "registered      731\n",
              "count           822\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "Ety01yPzeOuD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "f2907d27-e63a-43f4-c088-48c87aa8227a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             datetime  season  holiday  workingday  weather  temp   atemp  \\\n",
              "0 2011-01-01 00:00:00       1        0           0        1  9.84  14.395   \n",
              "1 2011-01-01 01:00:00       1        0           0        1  9.02  13.635   \n",
              "2 2011-01-01 02:00:00       1        0           0        1  9.02  13.635   \n",
              "3 2011-01-01 03:00:00       1        0           0        1  9.84  14.395   \n",
              "4 2011-01-01 04:00:00       1        0           0        1  9.84  14.395   \n",
              "\n",
              "   humidity  windspeed  casual  registered  count  year date    month  day  \n",
              "0        81        0.0       3          13     16  2011   01  January  Sat  \n",
              "1        80        0.0       8          32     40  2011   01  January  Sat  \n",
              "2        80        0.0       5          27     32  2011   01  January  Sat  \n",
              "3        75        0.0       3          10     13  2011   01  January  Sat  \n",
              "4        75        0.0       0           1      1  2011   01  January  Sat  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bcb50ea2-9707-4a77-9ba5-f78636430f93\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>season</th>\n",
              "      <th>holiday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weather</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>humidity</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>count</th>\n",
              "      <th>year</th>\n",
              "      <th>date</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-01 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "      <td>2011</td>\n",
              "      <td>01</td>\n",
              "      <td>January</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-01-01 01:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "      <td>2011</td>\n",
              "      <td>01</td>\n",
              "      <td>January</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-01-01 02:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.02</td>\n",
              "      <td>13.635</td>\n",
              "      <td>80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "      <td>2011</td>\n",
              "      <td>01</td>\n",
              "      <td>January</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-01-01 03:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "      <td>2011</td>\n",
              "      <td>01</td>\n",
              "      <td>January</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-01-01 04:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9.84</td>\n",
              "      <td>14.395</td>\n",
              "      <td>75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>01</td>\n",
              "      <td>January</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bcb50ea2-9707-4a77-9ba5-f78636430f93')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bcb50ea2-9707-4a77-9ba5-f78636430f93 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bcb50ea2-9707-4a77-9ba5-f78636430f93');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b95dde68-3e75-4e95-946f-680f96828e8f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b95dde68-3e75-4e95-946f-680f96828e8f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b95dde68-3e75-4e95-946f-680f96828e8f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10886,\n  \"fields\": [\n    {\n      \"column\": \"datetime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2012-12-19 23:00:00\",\n        \"num_unique_values\": 10886,\n        \"samples\": [\n          \"2011-07-19 11:00:00\",\n          \"2012-01-16 06:00:00\",\n          \"2011-12-11 18:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.791589843987567,\n        \"min\": 0.82,\n        \"max\": 41.0,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          6.56,\n          1.64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.474600626484948,\n        \"min\": 0.76,\n        \"max\": 45.455,\n        \"num_unique_values\": 60,\n        \"samples\": [\n          14.395,\n          16.665\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          29,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.164537326838689,\n        \"min\": 0.0,\n        \"max\": 56.9969,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          22.0028,\n          43.0006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 0,\n        \"max\": 367,\n        \"num_unique_values\": 309,\n        \"samples\": [\n          287,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 151,\n        \"min\": 0,\n        \"max\": 886,\n        \"num_unique_values\": 731,\n        \"samples\": [\n          566,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181,\n        \"min\": 1,\n        \"max\": 977,\n        \"num_unique_values\": 822,\n        \"samples\": [\n          626,\n          256\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"2012\",\n          \"2011\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"01\",\n          \"06\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"November\",\n          \"October\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Sat\",\n          \"Sun\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Basic EDA**"
      ],
      "metadata": {
        "id": "gPzveWwLf9cW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in ['year','month','day','season','holiday','workingday','weather']:\n",
        "  print(df[i].value_counts(normalize=True)*100)\n",
        "  print(\"-\"*50)"
      ],
      "metadata": {
        "id": "uH4LTwNAezIV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d4fe2717-2d4c-4baf-da8c-a82aa4f68666"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2012    50.192908\n",
            "2011    49.807092\n",
            "Name: year, dtype: float64\n",
            "--------------------------------------------------\n",
            "May          8.377733\n",
            "June         8.377733\n",
            "July         8.377733\n",
            "August       8.377733\n",
            "December     8.377733\n",
            "October      8.368547\n",
            "November     8.368547\n",
            "April        8.350175\n",
            "September    8.350175\n",
            "February     8.276686\n",
            "March        8.276686\n",
            "January      8.120522\n",
            "Name: month, dtype: float64\n",
            "--------------------------------------------------\n",
            "Sat    14.550799\n",
            "Sun    14.504869\n",
            "Thu    14.266030\n",
            "Mon    14.247658\n",
            "Wed    14.247658\n",
            "Tue    14.137424\n",
            "Fri    14.045563\n",
            "Name: day, dtype: float64\n",
            "--------------------------------------------------\n",
            "4    25.114826\n",
            "2    25.105640\n",
            "3    25.105640\n",
            "1    24.673893\n",
            "Name: season, dtype: float64\n",
            "--------------------------------------------------\n",
            "0    97.14312\n",
            "1     2.85688\n",
            "Name: holiday, dtype: float64\n",
            "--------------------------------------------------\n",
            "1    68.087452\n",
            "0    31.912548\n",
            "Name: workingday, dtype: float64\n",
            "--------------------------------------------------\n",
            "1    66.066507\n",
            "2    26.033437\n",
            "3     7.890869\n",
            "4     0.009186\n",
            "Name: weather, dtype: float64\n",
            "--------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# What Weather provides best booking.\n",
        "\n",
        "weather_df = df.groupby('weather').nunique().reset_index()\n",
        "weather_df = weather_df[['weather','count','registered','casual']]\n",
        "weather_df"
      ],
      "metadata": {
        "id": "GPapgVMtgj-T",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "f2989ae2-3b95-4329-920f-b3211dab4075"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   weather  count  registered  casual\n",
              "0        1    789         689     295\n",
              "1        2    593         520     202\n",
              "2        3    310         274     107\n",
              "3        4      1           1       1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cb100e5d-43c7-4dfe-aaf5-191039ec8de7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>weather</th>\n",
              "      <th>count</th>\n",
              "      <th>registered</th>\n",
              "      <th>casual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>789</td>\n",
              "      <td>689</td>\n",
              "      <td>295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>593</td>\n",
              "      <td>520</td>\n",
              "      <td>202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>310</td>\n",
              "      <td>274</td>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb100e5d-43c7-4dfe-aaf5-191039ec8de7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cb100e5d-43c7-4dfe-aaf5-191039ec8de7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cb100e5d-43c7-4dfe-aaf5-191039ec8de7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-94af00b0-6854-4fea-9dbe-01bc637fdca3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-94af00b0-6854-4fea-9dbe-01bc637fdca3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-94af00b0-6854-4fea-9dbe-01bc637fdca3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b16b8955-2e70-4288-afc5-186a7898e4c3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('weather_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b16b8955-2e70-4288-afc5-186a7898e4c3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('weather_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "weather_df",
              "summary": "{\n  \"name\": \"weather_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 343,\n        \"min\": 1,\n        \"max\": 789,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          593,\n          1,\n          789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 299,\n        \"min\": 1,\n        \"max\": 689,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          520,\n          1,\n          689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 126,\n        \"min\": 1,\n        \"max\": 295,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          202,\n          1,\n          295\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yulu.hist(bins=20, figsize=(20,15),color='lightblue')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "1pt3pdh7gziE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "fd9f2f04-4c58-4651-b6be-ca395f329d3a"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1500 with 12 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABlYAAATFCAYAAADSXutKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeVxVdf7H8TcgqwqoCciIhksqLlFUSrmlCCmZplNjmeJSlqKlTlY2pqIVaeWSmbaqTTqWTVouo6DmUuISxriVo6k5U4KTibjCFc7vD3+c8criBS7Lvb6ej4ePut/zvd/7/XzP99775XzuOcfFMAxDAAAAAAAAAAAAuC7Xyu4AAAAAAAAAAACAoyCxAgAAAAAAAAAAYCMSKwAAAAAAAAAAADYisQIAAAAAAAAAAGAjEisAAAAAAAAAAAA2IrECAAAAAAAAAABgIxIrAAAAAAAAAAAANiKxAgAAAAAAAAAAYCMSKwAAAAAAAAAAADYisQI4uMmTJ8vFxaWyu2GlKvYJAAAAAACgtPKPdfz22292aa9z587q3Lmz+fjYsWNycXHRwoULr/vcQYMG6eabb7ZLPwCUDokV4Ab1zjvv2PRlXZQLFy5o8uTJ2rRpk936BAAAAAAAAABVHYkV4AZlj8RKQkJCoYmVCRMm6OLFi6XvHAAAAAAAwA2kYcOGunjxogYMGFDZXQFgg2qV3QEAzqdatWqqVo2PFwAAAAAAAFu4uLjIy8ursrsBwEacsQI4kG+++UZ33nmnvLy81LhxY7377rsF6ixYsEBdunRRQECAPD09FRYWpnnz5lnVufnmm7V//35t3rxZLi4ucnFxsbquZ2ZmpkaPHq2QkBB5enqqSZMmmjZtmvLy8iRdue5n3bp1JUkJCQlmG5MnT5ZU+D1WXFxcNHLkSC1btkxhYWHy9vZWZGSk9u7dK0l699131aRJE3l5ealz5846duxYgdh27Nih++67T35+fvLx8VGnTp307bfflnY4AQBAJTt79qxGjx6tm2++WZ6engoICFC3bt20e/dus44t3/8///yzRowYoWbNmsnb21t16tTRQw89VGA9YbFYlJCQoKZNm8rLy0t16tRR+/btlZycbFVv48aN6tChg6pXry5/f3/16tVLP/zwg1Wd/PXO4cOHNWjQIPn7+8vPz0+DBw/WhQsX7DtQAACgysjMzCz2u//y5cuaOnWqGjduLE9PT91888168cUXlZ2dXWy7Rd1jZcWKFWrVqpW8vLzUqlUrLV++vNDnv/HGG7r77rtVp04deXt7KyIiQp9//rlVnU6dOunWW28t9PnNmjVTTEyMDSMAQOKMFcBh7N27V9HR0apbt64mT56sy5cva9KkSQoMDLSqN2/ePLVs2VIPPPCAqlWrppUrV2rEiBHKy8tTfHy8JGnWrFkaNWqUatSoob/85S+SZLZz4cIFderUSb/88ouefPJJNWjQQNu2bdP48eN14sQJzZo1S3Xr1tW8efM0fPhwPfjgg+rTp48kqU2bNsXGsHXrVn311VdmPxITE3X//ffrueee0zvvvKMRI0bo9OnTmj59uoYMGaKNGzeaz924caO6d++uiIgITZo0Sa6urmYSaevWrbrrrrvsM9AAAKDCPPXUU/r88881cuRIhYWF6dSpU/rmm2/0ww8/6Pbbb7f5+3/Xrl3atm2b+vXrp/r16+vYsWOaN2+eOnfurAMHDsjHx0fSlWRIYmKiHn/8cd11113KysrSd999p927d6tbt26SpPXr16t79+5q1KiRJk+erIsXL2rOnDm65557tHv37gI3in344YcVGhqqxMRE7d69Wx988IECAgI0bdq0Ch1LAABQMa733f/4449r0aJF+uMf/6g///nP2rFjhxITE/XDDz8UmRQpSlJSkvr27auwsDAlJibq1KlTGjx4sOrXr1+g7uzZs/XAAw+of//+ysnJ0dKlS/XQQw9p1apVio2NlSQNGDBATzzxhPbt26dWrVqZz921a5f+9a9/acKECWUYGeAGYwBwCL179za8vLyMn3/+2Sw7cOCA4ebmZlz9Vr5w4UKB58bExBiNGjWyKmvZsqXRqVOnAnWnTp1qVK9e3fjXv/5lVf7CCy8Ybm5uxvHjxw3DMIz//ve/hiRj0qRJBdqYNGmSce3HiyTD09PTOHr0qFn27rvvGpKMoKAgIysryywfP368Icmsm5eXZzRt2tSIiYkx8vLyrGINDQ01unXrVqAPAACg6vPz8zPi4+ML3VaS7//C1j8pKSmGJOPjjz82y2699VYjNja22D6Fh4cbAQEBxqlTp8yyf/7zn4arq6sxcOBAsyx/vTNkyBCr5z/44INGnTp1in0NAADgeGz57k9LSzMkGY8//rhVnWeffdaQZGzcuNEs69Spk9VxmaNHjxqSjAULFphl4eHhRr169YzMzEyzLCkpyZBkNGzY0Oo1rl0P5eTkGK1atTK6dOlilmVmZhpeXl7G888/b1X36aefNqpXr26cO3fu+gMBwDAMw+BSYIADyM3N1bp169S7d281aNDALG/RokWB0zS9vb3N/z9z5ox+++03derUSUeOHNGZM2eu+1rLli1Thw4dVKtWLf3222/mv6ioKOXm5mrLli2ljqNr165Wv/Js27atJKlv376qWbNmgfIjR45IktLS0nTo0CE9+uijOnXqlNmn8+fPq2vXrtqyZYt5mTIAAOA4/P39tWPHDv36668FtpXk+//q9Y/FYtGpU6fUpEkT+fv7W11WzN/fX/v379ehQ4cK7c+JEyeUlpamQYMGqXbt2mZ5mzZt1K1bN61Zs6bAc5566imrxx06dNCpU6eUlZVVssEAAAAOobjv/vy1wtixY63q/PnPf5YkrV692ubXyV+XxMXFyc/Pzyzv1q2bwsLCCtS/ej10+vRpnTlzRh06dLBaC/n5+alXr17629/+JsMwJF055vTpp5+qd+/eql69us39A250XAoMcAD//e9/dfHiRTVt2rTAtmbNmln9kf/tt99q0qRJSklJKXB97zNnzlh9GRfm0KFD2rNnj3kPlWudPHmyFBFccXVSSJLZl5CQkELLT58+bfZJkuLi4ops+8yZM6pVq1ap+wYAACre9OnTFRcXp5CQEEVERKhHjx4aOHCgGjVqVKLv/4sXLyoxMVELFizQL7/8Yh4oyK+Tb8qUKerVq5duueUWtWrVSvfdd58GDBhgXs70559/lnRlfXWtFi1aaN26dTp//rzVQYdr1zf565HTp0/L19e3pEMCAACquOK++3/++We5urqqSZMmVnWCgoLk7+9vrjVskV+3qGNBVydMJGnVqlV6+eWXlZaWZnU/l2vvgTtw4EB9+umn2rp1qzp27Kj169crIyNDAwYMsLlvAEisAE7lp59+UteuXdW8eXPNmDFDISEh8vDw0Jo1azRz5kybzurIy8tTt27d9NxzzxW6/ZZbbil1/9zc3EpUnn9QJL/fr7/+usLDwwutW6NGjVL3CwAAVI6HH35YHTp00PLly5WUlKTXX39d06ZN0xdffFGi7/9Ro0ZpwYIFGj16tCIjI+Xn5ycXFxf169fPav3TsWNH/fTTT/ryyy+VlJSkDz74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1j8AAFC0kq558r/X//rXvyooKKhAe9Wq/e/PmIcffljbtm3TuHHjFB4erho1aigvL0/33Xef1frgeq63vslv67HHHlNcXFyhddu0aWP1mLNVAAC4seXl5cnFxUX/+Mc/Cl1r1KhRw+pxUeuRshyHuTZRA8A+SKwAlcjDw0N33XWXtm7dqgYNGqhDhw6SrvyqMzs7W4sXL1ZGRoZ5E9eGDRtKkg4ePKhGjRqZ7eTk5Ojo0aOKioqy+bVvuukmff7552rfvr26du2qb775RsHBwXaJq2HDhsrLy9PRo0etfilx+PBhq3p169aVt7e3+avUqx08eNDq8cqVK5Wdna2vvvrK6hel1542m2/gwIEaO3asTpw4oSVLlig2NtY8swYAAFSskq558i/JFRAQUOz65vTp09qwYYMSEhI0ceJEs7ywtUVZDyrUrVtXNWvWVG5ubonWXAAA4MZQ2FqjcePGMgxDoaGhuuWWWyqkH4cOHbL68ezhw4eVl5enm2++uUJeH7hRcI8VoJJ16NBBO3bs0Ndff20eZLjpppvUokULTZs2zawjXbn2t4eHh9566y2rXyV8+OGHOnPmjGJjY0v02vXr19f69et18eJFdevWTadOnbJLTPn3R3nnnXesyufMmWP12M3NTTExMVqxYoWOHz9ulv/www9at25dgbr/x969x0VV538cfwNy8TaQF0ASjdL1lkZpKZnmFTSyTHfLchXNcjNwU7Yyd01FK9PKS4raxaRddS130/KSgvdKvESxmbZkq0W/VXA3Q1ITRji/P9yZHAGZGQdmBl7Px8OHzjnf+c7n+5nD+OV85pyvZPttjNOnT2v58uXlxvDggw/Kx8dHTzzxhI4eParf/va3zg8IAABcNUfmPHFxcTKZTHrhhRdkNpvL9PWf//xHUvnzA0maP39+mefUr19fklRQUOBU/H5+fho6dKj+/ve/68svv6wwJgAAUDuVN9cYMmSI/Pz8lJKSUma+YhiGy87DXCo1NdXmseVczMCBA13+WkBtxhUrgJv16NFDzz//vL7//nvryQRJ6tmzp1577TVdd911at68uaSL35ScPHmyUlJSNGDAAN1zzz3KycnR4sWLdeuttzpVPGjVqpXS09PVq1cvxcXFafv27Tb3LXdG586dNXToUM2fP18//PCDunXrpl27dunrr7+WZPstjpSUFG3evFk9evTQ448/rgsXLmjhwoXq0KGDvvjiC2u72NhYBQQEaNCgQfrd736nM2fO6I033lBoaKhOnDhRJoamTZtqwIABWrNmjUJCQhwuOgEAANdyZM5jMpm0ZMkSjRgxQrfccouGDRumpk2bKjc3Vxs3blT37t21aNEimUwm9ezZU3PmzJHZbNa1116r9PR0HTt2rMzrd+7cWZL0pz/9ScOGDZO/v78GDRpkPQlijxdffFE7duxQ165d9eijj6p9+/Y6deqUPvvsM23dulWnTp26yiwBAABvVdFc47nnntPkyZP17bffavDgwWrYsKGOHTumtWvXauzYsXryySddGsexY8d0zz33aMCAAcrMzNSKFSv00EMP6aabbnLp6wC1HVesAG52++23y8/PTw0bNrT5T+7SW2Rcavr06Vq0aJFyc3M1ceJEvfvuuxo7dqzS09PLLHpmr44dO+rDDz/U119/rUGDBunnn392fkD/8+c//1mJiYnauHGjJk2apOLiYr3zzjuSpKCgIGu7Tp06acuWLWratKmmTp2qt956SykpKWXWlWnTpo3+9re/ycfHR08++aSWLl2qsWPH6oknnqgwhpEjR0q6eO/1wMDAqx4TAABwnqNznoceekjbtm3Ttddeq5deeklPPPGEVq9erejoaI0ePdrabtWqVYqLi1NqaqomT54sf39/ffjhh2Ve/9Zbb9XMmTP1j3/8Q6NGjdKDDz7o8FUmYWFh2r9/v0aPHq333ntPSUlJWrBggU6dOmW96gYAANROFc01nnnmGf3973+Xr6+vUlJS9OSTT+qDDz5QbGys7rnnHpfH8c477ygwMFDPPPOMNm7cqKSkJC1btszlrwPUdj5GVa42DQCXyM7O1s0336wVK1Zo+PDhVf5677//vgYPHqzdu3eXOVkDAAAAAABQU0yfPl0pKSn6z3/+oyZNmrg7HKDG44oVAFWivKte5s+fL19fX+vCtFXtjTfe0PXXX6877rijWl4PAAAAAAAAQM3HGisAqsScOXOUlZWl3r17q06dOvrwww/14YcfauzYsYqMjKzS1169erW++OILbdy4UQsWLLBZ0wUAAAAAAAAArgaFFQBV4vbbb1dGRoZmzpypM2fOqEWLFpo+fbr+9Kc/VflrP/jgg2rQoIHGjBmjxx9/vMpfDwAAAAAAAEDtwRorAAAAAAAAAAAAdmKNFQAA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r5+1Tdu2bdWiRQtlZmaqW7duyszMVMeOHW1uDRYXF6dx48bp0KFDuvnmm5WZmWnTh6XNhAkTrhhPUVGRioqKrI8t90ozm802375whuX5V9tPbUTunEPenEPenFercldS4vK+XJG3WpF7N4qNjZVhGOXuCwoKUmpqqlJTUyt8fsuWLcvc6utyvXr10ueff35VcQIAAEjSp59+qt69e1sfW4odCQkJmj59uj744ANJUnR0tM3zduzYoV69ekmSVq5cqaSkJPXt21e+vr4aOnSoXn31VWvb4OBgpaenKzExUZ07d1aTJk00depUjR07tmoHBwBADeB0YWXdunUqKCiwrn2Sl5engIAAm4VfJSksLEx5eXnWNpcWVSz7Lfuu1KawsFA///xzhQvAzpo1SykpKWW2p6enq169eg6PrzyWW5/BceTOOeTNOeTNebUhd669u+9FrsjbuXPnXBAJAAAAaoJevXpV+KUQSVfcZ9GoUSOtWrXqim06deqkjz76yOH4AACo7ZwurCxbtkwDBw60XkLqbpMnT7a5XLWwsFCRkZGKjY21WcDNGWazWRkZGerfv7/XLwRU3cidc8ibc8ib82pT7tYfya+8kb1KSuR3NNslebNcaQkAAAAAAADP5lRh5bvvvtPWrVtt7j8eHh6u4uJiFRQU2Fy1kp+fr/DwcGub/fv32/SVn59v3Wf527Lt0jYmk6nCq1UkKTAw0LqA7KX8/f1ddpLQlX3VNuTOOeTNOeTNebUid36uv2bFFXmr8XkHAAAAAACoIRxavN5i+fLlCg0NVXx8vHVb586d5e/vr23btlm35eTkKDc3VzExMZKkmJgYHTx4UCdPnrS2ycjIkMlkUvv27a1tLu3D0sbSBwAAAAAAAAAAgLs4XFgpLS3V8uXLlZCQoDp1frngJTg4WGPGjFFycrJ27NihrKwsjR49WjExMerWrZukiwvHtm/fXiNGjNA//vEPbdmyRVOmTFFiYqL1apPHHntMR48e1dNPP61//vOfWrx4sd59911NnDjRRUMGAAAAAAAAAABwjsO3Atu6datyc3P18MMPl9k3b948+fr6aujQoSoqKlJcXJwWL15s3e/n56cNGzZo3LhxiomJUf369ZWQkKAZM2ZY20RFRWnjxo2aOHGiFixYoObNm+vNN99UXFyck0MEAAAAAAAAAABwDYcLK7GxsTIM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qOM52Llzp3x8fMr8ycvLq56Aq8CsWbN06623qmHDhgoNDdXgwYOVk5NT6fNq0lzWmRykpaWVOQ6CgoKqKWLXW7JkiTp16iSTySSTyaSYmBh9+OGHV3xOTToGJMdzUNOOgfK8+OKL8vHx0YQJE67YrqYdC/Bczv4O7AmmT59e5jOjbdu27g7riiqbJxmGoalTp6pZs2aqW7eu+vXrpyNHjrgn2ApUNoZRo0aVeV8GDBjgnmDLYc8c5fz580pMTFTjxo3VoEEDDR06VPn5+W6KuCx7xtCrV68y78Njjz3mpohtVTY/8PT8S5WPwZPzX57y5ife8D6Uh8KKpHfeeUfJycmaNm2aPvvsM910002Ki4vTyZMny22/Z88ePfjggxozZow+//xzDR48WIMHD9aXX35ZzZG7n6O527lzpx588EHt2LFDmZmZioyMVGxsrP79739Xc+Tu5WjeLL799ls9+eST6tGjRzVF6lkczVtxcbH69++vb7/9Vn/729+Uk5OjN954Q9dee201R+5ejuZt1apVeuaZZzRt2jR99dVXWrZsmd555x398Y9/rObI3evs2bO66aablJqaalf7Y8eOKT4+Xr1791Z2drYmTJigRx55RFu2bKniSFFbcYw6ngOLnJwcnThxwvonNDS0iiKsert27VJiYqL27t2rjIwMmc1mxcbG6uzZsxU+p6bNZZ3JgSSZTCab4+C7776rpohdr3nz5nrxxReVlZWlTz/9VH369NG9996rQ4cOldu+ph0DkuM5kGrWMXC5AwcO6LXXXlOnTp2u2K4mHgvwTM7+DuxJOnToYPOZ8fHHH7s7pCuqbJ40Z84cvfrqq1q6dKn27dun+vXrKy4uzqO+UGfPXG/AgAE278tf//rXaozwyuyZo0ycOFHr16/XmjVrtGvXLh0/flxDhgxxY9S27J1nPfroozbvw5w5c9wUsa3K5geenn/JvjmOp+b/chXNT7zhfSiXAeO2224zEhMTrY9LSkqMiIgIY9asWeW2v//++434+HibbV27djV+97vfVWmcnsjR3F3uwoULRsOGDY233367qkL0SM7k7cKFC8btt99uvPnmm0ZCQoJx7733VkOknsXRvC1ZssS4/vrrjeLi4uoK0SM5mrfExESjT58+NtuSk5ON7t27V2mcnkySsXbt2iu2efrpp40OHTrYbHvggQeMuLi4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orACAAAAoEpMnz5dPj4++u9//+vuUCRJ3377rXx8fJSWllZp21GjRum6666z2ebj46Pp06dXSWwAAMBz9erVS7169fL4Pt3BMt8DahsKK0AtdPjwYU2fPl3ffvutu0MBAADwWnv27NH06dNVUFDg7lAAAAAAVKM67g4AQPU7fPiwUlJS1KtXrzLfxAQAAKipWrZsqZ9//ln+/v5OPf/nn39WnTq//Aq1Z88epaSkaNSoUQoJCXFRlAAAwNOkp6e7OwQAHobCCgAAAIBawcfHR0FBQU4//2qeCwAAvFdAQIC7QwDgYbgVGFCDfPfdd3r88cfVpk0b1a1bV40bN9ZvfvMbm1t+paWl6Te/+Y0kqXfv3vLx8ZGPj4927txpbfPhhx+qR48eql+/vho2bKj4+HgdOnTI5rVGjRqlBg0aKDc3V3fffbcaNGiga6+9VqmpqZKkgwcPqk+fPqpfv75atmypVatW2Tw/LS1NPj4+2r17t373u9+pcePGMplMGjlypH788ceqSRAAAHCLgoIC61UdwcHBGj16tM6dOyfpyuueXL6mieUe3l9//bV++9vfKjg4WE2bNtWzzz4rwzD0/fff695775XJZFJ4eLheeeUVm/4qeq1169bpxhtvVFBQkG688UatXbu23HFcGs/06dP11FNPSZKioqKsc6pvv/1Wd955p2666aZy+2jTpo3i4uLsyBoAAHC1L774Qj4+Pvrggw+s27KysuTj46NbbrnFpu3AgQPVtWtXSWXXQ9m5c6d8fHz07rvv6vnnn1fz5s0VFBSkvn376ptvvinzuq+//rpuuOEG1a1bV7fddps++uijcuNbuHChOnTooHr16umaa65Rly5dbM6nWOZC//znP3X//ffLZDKpcePGeuKJJ3T+/Pky/a1YsUKdO3dW3bp11ahRIw0bNkzff/99mXb79u3TgAEDFBwcrHr16unOO+/UJ598Uqbdxx9/rFtvvVVBQUG64YYb9Nprr5U7DqA2oLAC1CAHDhzQnj17NGzYML366qt67LHHtG3bNvXq1ct68qJnz576/e9/L0n64x//qL/85S/6y1/+onbt2kmS/vKXvyg+Pl4NGjTQ7Nmz9eyzz+rw4cO64447yqzJUlJSooEDByoyMlJz5szRddddp6SkJKWlpWnAgAHq0qWLZs+erYYNG2rkyJE6duxYmZiTkpL01Vdfafr06Ro5cqRWrlypwYMHyzCMqk0WAACoNvfff79++uknzZo1S/fff7/S0tKUkpLidH8PPPCASktL9eKLL6pr16567rnnNH/+fPXv31/XXnutZs+erVatWunJJ5/U7t27r9hXenq6hg4dKh8fH82aNUuDBw/W6NGj9emnn17xeUOGDNGDDz4oSZo3b551TtW0aVONGDFCX3zxhb788kub5xw4cMBaFAIAANXvxhtvVEhIiM384KOPPpKvr6/+8Y9/qLCwUJJUWlqqPXv2qGfPnlfs78UXX9TatWv15JNPavLkydq7d6+GDx9u02bZsmX63e9+p/DwcM2ZM0fdu3fXPffcU6bA8cYbb+j3v/+92rdvr/nz5yslJUXR0dHat29fmde9//77df78ec2aNUt33XWXXn31VY0dO9amzfPPP6+RI0eqdevWmjt3riZMmKBt27apZ8+eNuvDbd++XT179lRhYaGmTZumF154QQUFBerTp4/2799vbXfw4EHFxsbq5MmTmj59ukaPHq1p06ZV+IUUoMYzANQY586dK7MtMzPTkGT8+c9/tm5bs2aNIcnYsWOHTduffvrJCAkJMR599FGb7Xl5eUZwcLDN9oSEBEOS8cILL1i3/fjjj0bdunUNHx8fY/Xq1dbt//znPw1JxrRp06zbli9fbkgyOnfubBQXF1u3z5kzx5BkvP/++w6PHwAAeJZp06YZkoyHH37YZvt9991nNG7c2DAMwzh27JghyVi+fHmZ518+f7D0N3bsWOu2CxcuGM2bNzd8fHyMF1980brdMi9JSEiwbivvtaKjo41mzZoZBQUF1m3p6emGJKNly5ZXjOell14yJBnHjh2zaVdQUGAEBQUZkyZNstn++9//3qhfv75x5syZMmMFAADVIz4+3rjtttusj4cMGWIMGTLE8PPzMz788EPDMAzjs88+szk3ceeddxp33nmn9Tk7duwwJBnt2rUzioqKrNsXLFhgSDIOHjxoGIZhFBcXG6GhoUZ0dLRNu9dff92QZNPnvffea3To0OGKsVvmQvfcc4/N9scff9yQZPzjH/8wDMMwvv32W8PPz894/vnnbdodPHjQqFOnjnV7aWmp0bp1ayMuLs4oLS21tjt37pwRFRVl9O/f37pt8ODBRlBQkPHdd99Ztx0+fNjw8/MzOMWM2ogrVoAapG7dutZ/m81m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43X55ZcrOTlZktSlSxfddNNNuu+++7Rw4UI5nU5lZmZq+PDhiomJkSTdcccdmjZtmkaNGqUJEyZo9+7dmjt3rmbPnu2VMQMA0JjwxAoAAAAAAEAD8uGHH6pXr17q1auXJCkrK0u9evXSlClTZLPZ9Omnn+r//u//dMUVV2jUqFHq3bu3/vnPf7os07VkyRJ17txZgwYN0s0336xrr71WL774ork/NDRUubm5OnjwoHr37q2HHnpIU6ZM0ejRoy/4eAEAaGx4YgUAAAAAAKABGTBggAzDOOv+devWnbeN8PBwLV269Jx1evTooX/+85+17h8AAM0dT6wAAAAAAAAAAAC4iSdW0KxZua74sE7RlrXV0Fm6HjsANADffPONJkyYoHfffVdlZWW6/PLLtWjRIvXp00eSZBiGHnvsMb300ksqKSlR//79tWDBAnXs2NFs4+jRoxozZoxWrlwpX19fpaamau7cuWrVqpW3hgUAAAAAADyAxAoAXCBWJ6SaUzIP8KTvvvtO/fv314033qh3331XF198sfbv3682bdqYdWbNmqXnn39er776quLj4zV58mQlJydr7969CgwMlCSNGDFCR44ckcPhkNPp1N13363Ro0efdwkOAAAAAADQuJBYAQAAzdpTTz2l2NhYLVq0yCyLj483/2wYhubMmaNJkybp1ltvlSS99tprioyM1Ntvv63hw4frs88+09q1a7Vz507zKZd58+bp5ptv1jPPPKOYmJgLOygAAAAAAOAxvGMFAAA0a++884769OmjX//614qIiFCvXr300ksvmfsPHjyowsJCJSYmmmWhoaHq27ev8vLyJEl5eXkKCwszkyqSlJiYKF9fX23fvv3CDQYAAAAAAHgcT6wAAIBm7cCBA1qwYIGysrL06KOPaufOnXrggQfk7++vtLQ0FRYWSpIiIyNdjouMjDT3FRYWKiIiwmV/ixYtFB4ebtapSXl5ucrLy83t0tJSSZLT6ZTT6azXuKqOr287zU2zi1tFhfVtWdlmc0Dc6qaBx60hX0OsvM415HECAAB4EokVAADQrFVWVqpPnz564oknJEm9evXS7t27tXDhQqWlpXn03NnZ2Zo2bVq18tzcXAUFBVlyDofDYUk7zU1ziZvNE20eKPBAq00fcaubhhq3Nfu93YPzs+I6V1ZWZkFPAAAAGh/LEysVFRWaOnWqXn/9dRUWFiomJkZ33XWXJk2aJB8fH0ln1ip/7LHH9NJLL6mkpET9+/fXggUL1LFjR7Odo0ePasyYMVq5cqV8fX2VmpqquXPnqlWrVlZ3GQAANGPR0dFKSEhwKevSpYv+/ve/S5KioqIkSUVFRYqOjjbrFBUVqWfPnmad4uJilzZOnz6to0ePmsfXZOLEicrKyjK3S0tLFRsbq6SkJIWEhNRrXE6nUw6HQ4MHD5afn1+92mpOmlvcVu4vsq6xigrZDhSo4rKeks0TKZsmirjVTQOP29COkeev5CVWXueqnrQEAABobixPrDz11FNasGCBXn31VXXt2lUffvih7r77boWGhuqBBx6QJM2aNUvPP/+8Xn31VcXHx2vy5MlKTk7W3r17FRgYKEkaMWKEjhw5IofDIafTqbvvvlujR4/W0qVLre4yAABoxvr37699+/a5lH3xxReKi4uTdOZF9lFRUVq/fr2ZSCktLdX27duVnp4uSbLb7SopKVF+fr569+4tSdqwYYMqKyvVt2/fs547ICBAAQEB1cr9/Pwsu6lvZVvNSbOJmyduSNtsDfJGd4NH3OqmgcatMVw/rLjONYZxAgAAeILliZWtW7fq1ltvVUpKiiTp0ksv1V//+lft2LFD0pmnVebMmaNJkybp1ltvlSS99tprioyM1Ntvv63hw4frs88+09q1a7Vz507zJbDz5s3TzTffrGeeeUYxMTFWdxuot7f2HbG0vWGdos9fCQBQb+PGjdM111yjJ554Qrfffrt27NihF198US+++KIkycfHR2PHjtXjjz+ujh07ml8KiYmJ0W233SbpzBMuN910k+677z4tXLhQTqdTmZmZGj58OPMWAAAAAACaGF+rG7zmmmu0fv16ffHFF5KkTz75RFu2bNGQIUMkSQcPHlRhYaESExPNY0JDQ9W3b1/l5eVJkvLy8hQWFmYmVSQpMTFRvr6+2r59u9VdBgAAzdhVV12lFStW6K9//au6deumGTNmaM6cORoxYoRZZ/z48RozZoxGjx6tq666SsePH9fatWvNJ20lacmSJercubMGDRqkm2++Wddee62ZnAEAAAAAAE2H5U+sPPLIIyotLVXnzp1ls9lUUVGhmTNnmjcnCgsLJUmRka5rzkZGRpr7CgsLFRER4drRFi0UHh5u1vm58vJylZeXm9tVa706nU45nU63+l5Vz936cF+DjW1Fhbd7cFa1iZVb8W3AY7WS5Z+xqrg1wPg1uP+f6qDBXhu8gBh41y233KJbbrnlrPt9fHw0ffp0TZ8+/ax1wsPDWbIUAAAAAIBmwPLEyrJly7RkyRItXbpUXbt2VUFBgcaOHauYmBilpaVZfTpTdna2pk2bVq08NzdXQUFBtWrL4XBY1S38TEOLbcNbjflHa/bX/phzxbchj9VKdYnbuVTFzXagwNqGLWD1WL2poV0bvKGsrMzbXQAAAAAahJX7iyx5fxJLbAMAPMXyxMrDDz+sRx55RMOHD5ckde/eXf/617+UnZ2ttLQ0RUVFSZKKiooUHf3jL7iioiLzhbBRUVEqLi52aff06dM6evSoefzPTZw4UVlZWeZ2aWmpYmNjlZSUpJCQELf67nQ65XA4NHjwYF7CZ7GGGtuV+4u83YWzGtox8vyV/h934tuQx2ql2sTNHSs/PyzbgQJVXNazwb0Y1eqxekNDvTZ4Q9WTlgAAAAAAAGjYLE+slJWVydfX9dUtNptNlZWVkqT4+HhFRUVp/fr1ZiKltLRU27dvV3p6uiTJbrerpKRE+fn56t27tyRpw4YNqqysVN++fWs8b0BAgAICAqqV+/n51fpmXV2OgXsaXGwb2I3yn6pLnM4Z3wY8VitZ/vmqipvN1uBi2KD+X6qnBndt8ILmPn4AAAAAAIDGwvLEytChQzVz5ky1b99eXbt21ccff6znnntO99xzj6Qza5SPHTtWjz/+uDp27Kj4+HhNnjxZMTExuu222yRJXbp00U033aT77rtPCxculNPpVGZmpoYPH66YmBiruwwAAAAAAAAAAOAWyxMr8+bN0+TJk/WHP/xBxcXFiomJ0e9//3tNmTLFrDN+/HidOHFCo0ePVklJia699lqtXbtWgYGBZp0lS5YoMzNTgwYNkq+vr1JTU/X8889b3V0AAAAAAAAAAAC3WZ5Yad26tebMmaM5c+actY6Pj4+mT5+u6dOnn7VOeHi4li5danX3AAAAAAAAAAAA6sz3/FUAAAAAAAAAAAAgkVgBAAAAAAAAAABwG4kVAAAAAAAAAAAAN1n+jhUAAAAAAJqzt/YdsbS9YZ2iLW0PAAAA9cMTKwAAAAAAAAAAAG4isQIAAAAAAAAAAOAmEisAAAAAAAAAAABuIrECAAAAAAAAAADgJhIrAAAAAAAAAAAAbiKxAgAAAAAAAAAA4CYSKwAAAAAAAAAAAG5q4e0OAKjZW/uOuF+5okI2SSv3F0k2m8f6BAAAAAAAAADNHU+sAAAAAAAAAAAAuInECgAAAAAAAAAAgJtYCgyNSq2WxwIAAAAAAAAAwGI8sQIAAAAAAAAAAOAmEisAAAAAAAAAAABuIrECAAAAAAAAAADgJhIrAAAAAAAAAAAAbiKxAgAAAAAAAAAA4CYSKwAAAAAAAAAAAG4isQIAAAAAAAAAAOCmFt7uAAAAAAAAAH60efNmPf3008rPz9eRI0e0YsUK3XbbbeZ+wzD02GOP6aWXXlJJSYn69++vBQsWqGPHjmado0ePasyYMVq5cqV8fX2VmpqquXPnqlWrVmadTz/9VBkZGdq5c6cuvvhijRkzRuPHj7+QQ4VF3tp3xNtdAIBmxSNPrHzzzTf63e9+p7Zt26ply5bq3r27PvzwQ3O/YRiaMmWKoqOj1bJlSyUmJmr//v0ubRw9elQjRoxQSEiIwsLCNGrUKB0/ftwT3QUAAAAAAGgwTpw4oSuvvFI5OTk17p81a5aef/55LVy4UNu3b1dwcLCSk5N18uRJs86IESO0Z88eORwOrVq1Sps3b9bo0aPN/aWlpUpKSlJcXJzy8/P19NNPa+rUqXrxxRc9Pj4AABo7y59Y+e6779S/f3/deOONevfdd3XxxRdr//79atOmjVmnagLw6quvKj4+XpMnT1ZycrL27t2rwMBASWcmAEeOHJHD4ZDT6dTdd9+t0aNHa+nSpVZ3GQAAAAAAoMEYMmSIhgwZUuM+wzA0Z84cTZo0Sbfeeqsk6bXXXlNkZKTefvttDR8+XJ999pnWrl2rnTt3qk+fPpKkefPm6eabb9YzzzyjmJgYLVmyRKdOndJf/vIX+fv7q2vXriooKNBzzz3nkoABAADVWf7EylNPPaXY2FgtWrRIV199teLj45WUlKQOHTpIqj4B6NGjh1577TUdPnxYb7/9tiSZE4CXX35Zffv21bXXXqt58+bpjTfe0OHDh63uMgAAAAAAQKNw8OBBFRYWKjEx0SwLDQ1V3759lZeXJ0nKy8tTWFiYmVSRpMTERPn6+mr79u1mneuvv17+/v5mneTkZO3bt0/ffffdBRoNAACNk+VPrLzzzjtKTk7Wr3/9a23atEmXXHKJ/vCHP+i+++6TdP4JwPDhw887AfjlL39pdbcBAAAAAAAavMLCQklSZGSkS3lkZKS5r7CwUBERES77W7RoofDwcJc68fHx1dqo2vfTlUeqlJeXq7y83NwuLS2VJDmdTjmdzvoMy2xHklRRUe+2XNqzikX9qtM5vXFui1j591DVluV/t40YMamOmLgiHq6sioPliZUDBw5owYIFysrK0qOPPqqdO3fqgQcekL+/v9LS0iybAPycFb/c+ZB5jmWxbcQTCY9qAhMtq3hs4twAY9sUrlVcd39EDAAAANDQZWdna9q0adXKc3NzFRQUZNl5bAcKLGlnzf7z16kNm7XN1e7cFsXEG6z+e5Akh8NhfaONHDGpjpi4Ih5nlJWVWdKO5YmVyspK9enTR0888YQkqVevXtq9e7cWLlyotLQ0q09nsvKXOx8yz6lvbL05iWkMGvNEyyqemjg3xNh6YnLqLVx3rfvFDgAAgKYtKipKklRUVKTo6GizvKioSD179jTrFBcXuxx3+vRpHT161Dw+KipKRUVFLnWqtqvq/NzEiROVlZVlbpeWlio2NlZJSUkKCQmp38B05stGDodDFZf1lGz1vwMwtGPk+SvVwsr9ReevZLWKCtkOFFgWE2+w8u+h6jMyePBg+fn5WdZuY0ZMqiMmroiHq6oHMurL8sRKdHS0EhISXMq6dOmiv//975KsmwD8nBW/3PmQeY5VsfXKJKYxaAITLatYPnH+/HCDja3VY/UGrrs/suoXOwAAAJq2+Ph4RUVFaf369eZ9lNLSUm3fvl3p6emSJLvdrpKSEuXn56t3796SpA0bNqiyslJ9+/Y16/zpT3+S0+k05+IOh0OdOnWqcRkwSQoICFBAQEC1cj8/P2vn8zabJf/+svzfGN78N6FFMfEGT/xbz/LPXBNATKojJq6IxxlWxcDyxEr//v21b98+l7IvvvhCcXFxkqybAPyclb/c+ZB5Tr1j20gnERdMI55oWcVjE+cGGNumdJ3iutu0/j4BAABQP8ePH9eXX35pbh88eFAFBQUKDw9X+/btNXbsWD3++OPq2LGj4uPjNXnyZMXExOi2226TdOYLrjfddJPuu+8+LVy4UE6nU5mZmRo+fLhiYmIkSXfccYemTZumUaNGacKECdq9e7fmzp2r2bNne2PIAAA0Kr5WNzhu3Dht27ZNTzzxhL788kstXbpUL774ojIyMiRJPj4+5gTgnXfe0a5duzRy5MizTgB27NihDz74oNoEAAAAwBOefPJJc75S5eTJk8rIyFDbtm3VqlUrpaamVls649ChQ0pJSVFQUJAiIiL08MMP6/Tp0xe49wAAoCn48MMP1atXL/Xq1UuSlJWVpV69emnKlCmSpPHjx2vMmDEaPXq0rrrqKh0/flxr165VYGCg2caSJUvUuXNnDRo0SDfffLOuvfZavfjii+b+0NBQ5ebm6uDBg+rdu7ceeughTZkyRaNHj76wgwUAoBGy/ImVq666SitWrNDEiRM1ffp0xcfHa86cORoxYoRZZ/z48Tpx4oRGjx6tkpISXXvttTVOADIzMzVo0CD5+voqNTVVzz//vNXdBQAAMO3cuVN//vOf1aNHD5fycePGafXq1Vq+fLlCQ0OVmZmpYcOG6YMPPpAkVVRUKCUlRVFRUdq6dauOHDmikSNHys/Pz3zvHAAAgLsGDBggwzDOut/Hx0fTp0/X9OnTz1onPDxcS5cuPed5evTooX/+85917icAAM2V5YkVSbrlllt0yy23nHW/VRMAAAAAqxw/flwjRozQSy+9pMcff9wsP3bsmF555RUtXbpUAwcOlCQtWrRIXbp00bZt29SvXz/l5uZq7969eu+99xQZGamePXtqxowZmjBhgqZOnSp/f39vDQsAAAAAAFjMI4kV4Kfe2nfkzMvV9f9ePt/A3lMBNFZv7TtiaXvDOkVb2h7Q2GRkZCglJUWJiYkuiZX8/Hw5nU4lJiaaZZ07d1b79u2Vl5enfv36KS8vT927d1dkZKRZJzk5Wenp6dqzZ4+5jMfPlZeXq7y83NwuLS2VJDmdTjmdznqNp+r4+rbT3DS7uFVUWN+WlW02B8StbppZ3Ky8Jll5nWs210oAAICfIbECAACavTfeeEMfffSRdu7cWW1fYWGh/P39FRYW5lIeGRmpwsJCs85PkypV+6v2nU12dramTZtWrTw3N1dBQUG1HUaNHA6HJe00N80lbp74uovtQIEHWm36iFvdNJe4rdlvfZtWXOfKysos6AkAAEDjQ2IFAAA0a//+97/14IMPyuFwuLzv7UKYOHGisrKyzO3S0lLFxsYqKSlJISEh9Wrb6XTK4XBo8ODB8vPzq29Xm43GELeV+4u83YWaVVTIdqBAFZf15Anl2iBuddPM4ja0Y+T5K7nJyutc1ZOWAAAAzQ2JFQAA0Kzl5+eruLhYv/jFL8yyiooKbd68WS+88ILWrVunU6dOqaSkxOWplaKiIkVFRUmSoqKitGPHDpd2i4qKzH1nExAQoICAgGrlfn5+lt3Ut7Kt5qRBx62h30S22Rp+Hxsi4lY3zSRunrgeWXGda7DXSQAAAA/z9XYHAAAAvGnQoEHatWuXCgoKzJ8+ffpoxIgR5p/9/Py0fv1685h9+/bp0KFDstvtkiS73a5du3apuLjYrONwOBQSEqKEhIQLPiYAAAAAAOA5PLECAACatdatW6tbt24uZcHBwWrbtq1ZPmrUKGVlZSk8PFwhISEaM2aM7Ha7+vXrJ0lKSkpSQkKC7rzzTs2aNUuFhYWaNGmSMjIyanwiBQAAAAAANF4kVgAAAM5j9uzZ8vX1VWpqqsrLy5WcnKz58+eb+202m1atWqX09HTZ7XYFBwcrLS1N06dP92KvAQAAAACAJ5BYAQAA+JmNGze6bAcGBionJ0c5OTlnPSYuLk5r1qzxcM8AAAAArNxfZMk7toZ1iragNwCaI96xAgAAAAAAAAAA4CaeWAHQpLy174i3uwAAAAAAAACgCeOJFQAAAAAAAAAAADeRWAEAAAAAAAAAAHATiRUAAAAAAAAAAAA3kVgBAAAAAAAAAABwE4kVAAAAAAAAAAAAN5FYAQAAAAAAAAAAcBOJFQAAAAAAAAAAADeRWAEAAAAAAAAAAHATiRUAAAAAAAAAAAA3kVgBAAAAAAAAAABwE4kVAAAAAAAAAAAAN5FYAQAAAAAAAAAAcBOJFQAAAAAAAAAAADd5PLHy5JNPysfHR2PHjjXLTp48qYyMDLVt21atWrVSamqqioqKXI47dOiQUlJSFBQUpIiICD388MM6ffq0p7sLAAAAAAAAAABwVh5NrOzcuVN//vOf1aNHD5fycePGaeXKlVq+fLk2bdqkw4cPa9iwYeb+iooKpaSk6NSpU9q6dateffVVLV68WFOmTPFkdwEAAAAAAAAAAM7JY4mV48ePa8SIEXrppZfUpk0bs/zYsWN65ZVX9Nxzz2ngwIHq3bu3Fi1apK1bt2rbtm2SpNzcXO3du1evv/66evbsqSFDhmjGjBnKycnRqVOnPNVlAAAAAAAAAACAc2rhqYYzMjKUkpKixMREPf7442Z5fn6+nE6nEhMTzbLOnTurffv2ysvLU79+/ZSXl6fu3bsrMjLSrJOcnKz09HTt2bNHvXr18lS3AQAAAAAAAFjkrX1HrGusokI261oDgDrzSGLljTfe0EcffaSdO3dW21dYWCh/f3+FhYW5lEdGRqqwsNCs89OkStX+qn01KS8vV3l5ubldWloqSXI6nXI6nW71u6qeu/XhpoqKMz9Vf4b1iK/nNKPYeuPax3X3R8QAAAAAAACgcbA8sfLvf/9bDz74oBwOhwIDA61u/qyys7M1bdq0auW5ubkKCgqqVVsOh8OqbkFy+SaB7UCBt7rRLBBfz2kOsV2z33vn5rorlZWVebsLAAAAAAAAcIPliZX8/HwVFxfrF7/4hVlWUVGhzZs364UXXtC6det06tQplZSUuDy1UlRUpKioKElSVFSUduzY4dJuUVGRua8mEydOVFZWlrldWlqq2NhYJSUlKSQkxK2+O51OORwODR48WH5+fm4dg/Nbub/ozKOaBwpUcVlPycZDm5Yjvp7TjGI7tGPk+StZjOvuj6qetAQAAAAAAEDDZnliZdCgQdq1a5dL2d13363OnTtrwoQJio2NlZ+fn9avX6/U1FRJ0r59+3To0CHZ7XZJkt1u18yZM1VcXKyIiAhJZ77NHBISooSEhBrPGxAQoICAgGrlfn5+tb5ZV5djcA4/vRltszX5m9NeRXw9pxnE1pvXPa673o0/AAAAAAAA3Gd5YqV169bq1q2bS1lwcLDatm1rlo8aNUpZWVkKDw9XSEiIxowZI7vdrn79+kmSkpKSlJCQoDvvvFOzZs1SYWGhJk2apIyMjBqTJwAAAAAAAAAAABeCR15efz6zZ8+Wr6+vUlNTVV5eruTkZM2fP9/cb7PZtGrVKqWnp8tutys4OFhpaWmaPn26N7oLAAAAAAAAAAAg6QIlVjZu3OiyHRgYqJycHOXk5Jz1mLi4OK1Zs8bDPQMAAAAAAAAAAHCfr7c7AAAAAAAAAAAA0FiQWAEAAAAAAAAAAHATiRUAAAAAAAAAAAA3kVgBAAAAAAAAAABw0wV5eT0AAADQXL2174i3uwAAAAAAsBBPrAAAAAAAAAAAALiJxAoAAAAAAEAjMnXqVPn4+Lj8dO7c2dx/8uRJZWRkqG3btmrVqpVSU1NVVFTk0sahQ4eUkpKioKAgRURE6OGHH9bp06cv9FAAAGiUWAoMAAAAAACgkenatavee+89c7tFix9v8YwbN06rV6/W8uXLFRoaqszMTA0bNkwffPCBJKmiokIpKSmKiorS1q1bdeTIEY0cOVJ+fn564oknLvhYAABobEisAAAAAAAANDItWrRQVFRUtfJjx47plVde0dKlSzVw4EBJ0qJFi9SlSxdt27ZN/fr1U25urvbu3av33ntPkZGR6tmzp2bMmKEJEyZo6tSp8vf3v9DDAQCgUSGxAgAAAAAA0Mjs379fMTExCgwMlN1uV3Z2ttq3b6/8/Hw5nU4lJiaadTt37qz27dsrLy9P/fr1U15enrp3767IyEizTnJystLT07Vnzx716tWrxnOWl5ervLzc3C4tLZUkOZ1OOZ3Oeo/JbKOiot5tubRnFYv6VadzeuPcDZHF8bD8M+IFVWNoCmOxCjFxRTxcWRUHEisAAKDZy87O1ltvvaXPP/9cLVu21DXXXKOnnnpKnTp1MuucPHlSDz30kN544w2Vl5crOTlZ8+fPd7khcejQIaWnp+v9999Xq1atlJaWpuzsbJelOQAAAOqrb9++Wrx4sTp16qQjR45o2rRpuu6667R7924VFhbK399fYWFhLsdERkaqsLBQklRYWOgyh6naX7XvbLKzszVt2rRq5bm5uQoKCqrnqH5kO1BgSTtr9lvSjMlmbXO1O7dFMWkqGupnxJscDoe3u9DgEBNXxOOMsrIyS9rhX/kAAKDZ27RpkzIyMnTVVVfp9OnTevTRR5WUlKS9e/cqODhYEmuVAwCAhmPIkCHmn3v06KG+ffsqLi5Oy5YtU8uWLT123okTJyorK8vcLi0tVWxsrJKSkhQSElLv9p1OpxwOhyou6ynZ6p/GGNox8vyVamHl/iJL23NLRYVsBwosi0mjZ3E8rP6MeEPV/zeDBw+Wn5+ft7vTIBATV8TDVdXTlvVFYgUAADR7a9euddlevHixIiIilJ+fr+uvv561ygEAQIMWFhamK664Ql9++aUGDx6sU6dOqaSkxOWplaKiIvOdLFFRUdqxY4dLG0VFRea+swkICFBAQEC1cj8/P2tv1tlsltw0t/wGojcTGxbFpMloqJ8RL7L8/8MmgJi4Ih5nWBUDEisAAEnSW/uOWNbWsE7RlrUFeMOxY8ckSeHh4ZLksbXKPblOOevo1o1H4tZc1kRnDfi6IW5108ziZuU1ycrrHL9jGo7jx4/rq6++0p133qnevXvLz89P69evV2pqqiRp3759OnTokOx2uyTJbrdr5syZKi4uVkREhKQzS8SEhIQoISHBa+MAAKCxILECAADwE5WVlRo7dqz69++vbt26SZLH1iq/EOuUs45u3VgZt+b23VLWgK8b4lY3zSVunngHgBXXOavWKEft/fGPf9TQoUMVFxenw4cP67HHHpPNZtNvf/tbhYaGatSoUcrKylJ4eLhCQkI0ZswY2e129evXT5KUlJSkhIQE3XnnnZo1a5YKCws1adIkZWRk1PhECgAAcEViBQAA4CcyMjK0e/dubdmyxePn8uQ65ayjWzeeiJtX1mP3BtaArxviVjfNLG5WvgPAyuucVWuUo/b+85//6Le//a2+/fZbXXzxxbr22mu1bds2XXzxxZKk2bNny9fXV6mpqSovL1dycrLmz59vHm+z2bRq1Sqlp6fLbrcrODhYaWlpmj59ureGBABAo0JiBQAA4P/JzMzUqlWrtHnzZrVr184sj4qK8sha5RdinXLW0a0bS+PWDG76umAN+LohbnXTTOLmieu4Fdc5fr94zxtvvHHO/YGBgcrJyVFOTs5Z68TFxWnNmjVWdw0AgGbB19sdAAAA8DbDMJSZmakVK1Zow4YNio+Pd9n/07XKq9S0VvmuXbtUXFxs1mGtcgAAAAAAmh6eWAEAAM1eRkaGli5dqn/84x9q3bq1+U6U0NBQtWzZkrXKAQAAAJzXW/uOWNresE7RlrYHwDokVgAAQLO3YMECSdKAAQNcyhctWqS77rpLEmuVAwAAAACAM0isoBqrs+sAADR0hmGctw5rlQMAAAAAAIl3rAAAAAAAAAAAALiNxAoAAAAAAAAAAICbLE+sZGdn66qrrlLr1q0VERGh2267Tfv27XOpc/LkSWVkZKht27Zq1aqVUlNTVVRU5FLn0KFDSklJUVBQkCIiIvTwww/r9OnTVncXAAAAAAAAAADAbZYnVjZt2qSMjAxt27ZNDodDTqdTSUlJOnHihFln3LhxWrlypZYvX65Nmzbp8OHDGjZsmLm/oqJCKSkpOnXqlLZu3apXX31Vixcv1pQpU6zuLgAAAAAAAAAAgNssf3n92rVrXbYXL16siIgI5efn6/rrr9exY8f0yiuvaOnSpRo4cKAkadGiRerSpYu2bdumfv36KTc3V3v37tV7772nyMhI9ezZUzNmzNCECRM0depU+fv7W91tAAAAAAAAAACA87I8sfJzx44dkySFh4dLkvLz8+V0OpWYmGjW6dy5s9q3b6+8vDz169dPeXl56t69uyIjI806ycnJSk9P1549e9SrVy9PdxsAAAAAgAbhrX1HrGusokI261oDAABoljyaWKmsrNTYsWPVv39/devWTZJUWFgof39/hYWFudSNjIxUYWGhWeenSZWq/VX7alJeXq7y8nJzu7S0VJLkdDrldDrd6m9VPXfrN1kVFZ5r0xNtg/h6ErGtE667tUcMAAAAAAAAGgePJlYyMjK0e/dubdmyxZOnkSRlZ2dr2rRp1cpzc3MVFBRUq7YcDodV3WqUPPntJduBAg+2DuLrOcS2dtbsr1395n7dlaSysjJvdwEAAAAAAABu8FhiJTMzU6tWrdLmzZvVrl07szwqKkqnTp1SSUmJy1MrRUVFioqKMuvs2LHDpb2ioiJzX00mTpyorKwsc7u0tFSxsbFKSkpSSEiIW312Op1yOBwaPHiw/Pz83DqmKVq5v8j6RisqZDtQoIrLeko2Hjy3HPH1HGJbJ0M7Rp6/krju/lTVk5YAAAAAAABo2CxPrBiGoTFjxmjFihXauHGj4uPjXfb37t1bfn5+Wr9+vVJTUyVJ+/bt06FDh2S32yVJdrtdM2fOVHFxsSIiIiSd+TZzSEiIEhISajxvQECAAgICqpX7+fnV+mZdXY5pUjx589hm4+a0JxFfzyG2tcJ1t/aa+/gBAAAAAAAaC8sTKxkZGVq6dKn+8Y9/qHXr1uY7UUJDQ9WyZUuFhoZq1KhRysrKUnh4uEJCQjRmzBjZ7Xb169dPkpSUlKSEhATdeeedmjVrlgoLCzVp0iRlZGTUmDwBAAAAAAAAAAC4ECxPrCxYsECSNGDAAJfyRYsW6a677pIkzZ49W76+vkpNTVV5ebmSk5M1f/58s67NZtOqVauUnp4uu92u4OBgpaWlafr06VZ3FwAAAAAAAAAAwG0eWQrsfAIDA5WTk6OcnJyz1omLi9OaNWus7BoAAAAAAAAAAEC9eOzl9biw3tp3xNtdAAAAaDJW7i/i3VoAAABNHPfTANSVr7c7AAAAAAAAAAAA0FjwxAoAwHJuf+unokI2nf+b4cM6RVvTMQAAAAAAAKCeeGIFAAAAAAAAAADATSRWAAAAAAAAAAAA3ERiBQAAAAAAAAAAwE0kVgAAAAAAAAAAANzEy+sBAAAAAAAAoIF5a9+R81eqqJBN0sr9RZLNdtZqwzpFW9cxADyxAgAAAAAAAAAA4C4SKwAAAAAAAAAAAG4isQIAAAAAAAAAAOAmEisAAAAAAAAAAABuIrECAAAAAAAAAADgJhIrAAAAAAAAAAAAbiKxAgAAAAAAAAAA4CYSKwAAAAAAAAAAAG4isQIAAAAAAAAAAOAmEisAAAAAAAAAAABuauHtDgAAAAD19da+I9Y0VFEhmzUtAQAAAACaKBIrAIAGz7IbppKGdYq2rC0AAAAAAAA0PyRWAAAAAAAAAKAJs/ILi1bjC5BojHjHCgAAAAAAAAAAgJt4YsVLGnKWGAAAAAAAAAAA1KxBJ1ZycnL09NNPq7CwUFdeeaXmzZunq6++2tvdAgAAOKuGNn9Zub9IslnzOnYe0QcAoGlqaPMXAAAauga7FNjf/vY3ZWVl6bHHHtNHH32kK6+8UsnJySouLvZ21wAAAGrE/AUAADQ2zF8AAKi9BvvEynPPPaf77rtPd999tyRp4cKFWr16tf7yl7/okUce8XLvAAAAqmP+AgAAGhvmLwC8zepXJgy97CJL2wNq0iATK6dOnVJ+fr4mTpxolvn6+ioxMVF5eXle6RPvRAGApsHq6zlLI6FKQ5y/AAAAnAvzFwA4N+4h4GwaZGLlf//7nyoqKhQZGelSHhkZqc8//7zGY8rLy1VeXm5uHzt2TJJ09OhROZ1Ot87rdDpVVlamb7/9Vn5+fi77yo6V1GIEqKaiQrayMlUcK7FsnXf8BPH1HGLrWU0gvt9+629JO99//70kyTAMS9rDheet+cvZVM1rrPz/y6rPuyS9+1UDXV6kCVyXvIbY1Q1xqxviVnf/L3Y1/bu3tpi/NH61nb94cu4iWT9/sXLuInnp3hDXO1fEozpiUs3fPvxWtrIy/e3DfQ0uJq/vKLG0vSEdIs5b51z3vJsjq+YvDTKxUhfZ2dmaNm1atfL4+Hgv9AYAgLr5/vvvFRoa6u1u4AJh/gIAaAqYvzQfzF0AAE1FfecvDTKxctFFF8lms6moqMilvKioSFFRUTUeM3HiRGVlZZnblZWVOnr0qNq2bSsfHx+3zltaWqrY2Fj9+9//VkhISN0HgGqIrWcRX88htp5FfH9kGIa+//57xcTEeLsrqCNvzV/Ohv+/6oa41R2xqxviVjfEre6sjB3zl8avtvMXT85dJP7frgkxcUU8qiMm1RETV8TDlVXzlwaZWPH391fv3r21fv163XbbbZLO/LJev369MjMzazwmICBAAQEBLmVhYWF1On9ISAgfMg8htp5FfD2H2HoW8T2Db3o2bt6ev5wN/3/VDXGrO2JXN8Stbohb3VkVO+YvjVtt5y8XYu4i8f92TYiJK+JRHTGpjpi4Ih4/smL+0iATK5KUlZWltLQ09enTR1dffbXmzJmjEydO6O677/Z21wAAAGrE/AUAADQ2zF8AAKi9BptY+c1vfqP//ve/mjJligoLC9WzZ0+tXbu22gvVAAAAGgrmLwAAoLFh/gIAQO012MSKJGVmZp516QxPCAgI0GOPPVbtsVbUH7H1LOLrOcTWs4gvmqILPX85G/7/qhviVnfErm6IW90Qt7ojdqgJ85eGi5i4Ih7VEZPqiIkr4uEZPoZhGN7uBAAAAAAAAAAAQGPg6+0OAAAAAAAAAAAANBYkVgAAAAAAAAAAANxEYgUAAAAAAAAAAMBNJFYAAAAAAAAAAADcRGLl/8nJydGll16qwMBA9e3bVzt27PB2lxqlzZs3a+jQoYqJiZGPj4/efvttl/2GYWjKlCmKjo5Wy5YtlZiYqP3793uns41Mdna2rrrqKrVu3VoRERG67bbbtG/fPpc6J0+eVEZGhtq2batWrVopNTVVRUVFXupx47JgwQL16NFDISEhCgkJkd1u17vvvmvuJ7bWefLJJ+Xj46OxY8eaZcQXsB5zm3Pj96o1uKa775tvvtHvfvc7tW3bVi1btlT37t314YcfmvuZJ1dXUVGhyZMnKz4+Xi1btlSHDh00Y8YMGYZh1iFuZ1jx77CjR49qxIgRCgkJUVhYmEaNGqXjx49fwFGguWvOcxfupbhinlYd9yzOjTnpGVOnTpWPj4/LT+fOnc39zTEmnkRiRdLf/vY3ZWVl6bHHHtNHH32kK6+8UsnJySouLvZ21xqdEydO6Morr1ROTk6N+2fNmqXnn39eCxcu1Pbt2xUcHKzk5GSdPHnyAve08dm0aZMyMjK0bds2ORwOOZ1OJSUl6cSJE2adcePGaeXKlVq+fLk2bdqkw4cPa9iwYV7sdePRrl07Pfnkk8rPz9eHH36ogQMH6tZbb9WePXskEVur7Ny5U3/+85/Vo0cPl3LiC1iLuc358Xu1/rimu++7775T//795efnp3fffVd79+7Vs88+qzZt2ph1mCdX99RTT2nBggV64YUX9Nlnn+mpp57SrFmzNG/ePLMOcTvDin+HjRgxQnv27JHD4dCqVau0efNmjR49+kINAc1cc5+7cC/FFfO06rhncXbMSV117dpVR44cMX+2bNli7muuMfEYA8bVV19tZGRkmNsVFRVGTEyMkZ2d7cVeNX6SjBUrVpjblZWVRlRUlPH000+bZSUlJUZAQIDx17/+1Qs9bNyKi4sNScamTZsMwzgTSz8/P2P58uVmnc8++8yQZOTl5Xmrm41amzZtjJdffpnYWuT77783OnbsaDgcDuOGG24wHnzwQcMw+OwCnsDcpvb4vVo7XNNrZ8KECca111571v3Mk2uWkpJi3HPPPS5lw4YNM0aMGGEYBnE7m7r8O2zv3r2GJGPnzp1mnXfffdfw8fExvvnmmwvWdzRfzF1+xL2U6pin1Yx7FsxJf+6xxx4zrrzyyhr3NdeYeFKzf2Ll1KlTys/PV2Jiolnm6+urxMRE5eXlebFnTc/BgwdVWFjoEuvQ0FD17duXWNfBsWPHJEnh4eGSpPz8fDmdTpf4du7cWe3btye+tVRRUaE33nhDJ06ckN1uJ7YWycjIUEpKikscJT67gNWY29QNv1drh2t67bzzzjvq06ePfv3rXysiIkK9evXSSy+9ZO5nnlyza665RuvXr9cXX3whSfrkk0+0ZcsWDRkyRBJxc5c7ccrLy1NYWJj69Olj1klMTJSvr6+2b99+wfuM5oW5y7lxrWOe9nPcs/gRc9Lq9u/fr5iYGF122WUaMWKEDh06JKl5x8RTWni7A972v//9TxUVFYqMjHQpj4yM1Oeff+6lXjVNhYWFklRjrKv2wT2VlZUaO3as+vfvr27dukk6E19/f3+FhYW51CW+7tu1a5fsdrtOnjypVq1aacWKFUpISFBBQQGxrac33nhDH330kXbu3FltH59dwFrMbWqP36u1wzW99g4cOKAFCxYoKytLjz76qHbu3KkHHnhA/v7+SktLY558Fo888ohKS0vVuXNn2Ww2VVRUaObMmRoxYoQk/n3hLnfiVFhYqIiICJf9LVq0UHh4OLGExzF3Obfmfq1jnvYj7lm4Yk5aXd++fbV48WJ16tRJR44c0bRp03Tddddp9+7dzTYmntTsEytAY5SRkaHdu3e7rJOI+uvUqZMKCgp07Ngxvfnmm0pLS9OmTZu83a1G79///rcefPBBORwOBQYGers7AFANv1fdxzW9biorK9WnTx898cQTkqRevXpp9+7dWrhwodLS0rzcu4Zr2bJlWrJkiZYuXaquXbuqoKBAY8eOVUxMDHEDgGaCedqPuGfxI+akNat6qleSevToob59+youLk7Lli1Ty5YtvdizpqnZLwV20UUXyWazqaioyKW8qKhIUVFRXupV01QVT2JdP5mZmVq1apXef/99tWvXziyPiorSqVOnVFJS4lKf+LrP399fl19+uXr37q3s7GxdeeWVmjt3LrGtp/z8fBUXF+sXv/iFWrRooRYtWmjTpk16/vnn1aJFC0VGRhJfwELMbWqH36u1wzW9bqKjo5WQkOBS1qVLF3NpBubJNXv44Yf1yCOPaPjw4erevbvuvPNOjRs3TtnZ2ZKIm7vciVNUVFS1l4SfPn1aR48eJZbwOOYu59acr3XM01xxz+JHzEndExYWpiuuuEJffvlls/yceFqzT6z4+/urd+/eWr9+vVlWWVmp9evXy263e7FnTU98fLyioqJcYl1aWqrt27cTazcYhqHMzEytWLFCGzZsUHx8vMv+3r17y8/PzyW++/bt06FDh4hvHVVWVqq8vJzY1tOgQYO0a9cuFRQUmD99+vTRiBEjzD8TX8A6zG3cw+/VuuGaXjf9+/fXvn37XMq++OILxcXFSWKefDZlZWXy9XX9J6vNZlNlZaUk4uYud+Jkt9tVUlKi/Px8s86GDRtUWVmpvn37XvA+o3lh7nJuzfFaxzzNPc35ngVzUvccP35cX331laKjo5vl58Tj6vHi+ybjjTfeMAICAozFixcbe/fuNUaPHm2EhYUZhYWF3u5ao/P9998bH3/8sfHxxx8bkoznnnvO+Pjjj41//etfhmEYxpNPPmmEhYUZ//jHP4xPP/3UuPXWW434+Hjjhx9+8HLPG7709HQjNDTU2Lhxo3HkyBHzp6yszKxz//33G+3btzc2bNhgfPjhh4bdbjfsdrsXe914PPLII8amTZuMgwcPGp9++qnxyCOPGD4+PkZubq5hGMTWajfccIPx4IMPmtvEF7AWc5vz4/eqdbimn9+OHTuMFi1aGDNnzjT2799vLFmyxAgKCjJef/11sw7z5OrS0tKMSy65xFi1apVx8OBB46233jIuuugiY/z48WYd4naGFf8Ou+mmm4xevXoZ27dvN7Zs2WJ07NjR+O1vf+utIaGZae5zF+6luGKeVh33LM6POalhPPTQQ8bGjRuNgwcPGh988IGRmJhoXHTRRUZxcbFhGM0zJp5EYuX/mTdvntG+fXvD39/fuPrqq41t27Z5u0uN0vvvv29IqvaTlpZmGIZhVFZWGpMnTzYiIyONgIAAY9CgQca+ffu82+lGoqa4SjIWLVpk1vnhhx+MP/zhD0abNm2MoKAg45e//KVx5MgR73W6EbnnnnuMuLg4w9/f37j44ouNQYMGmRMUwyC2Vvv5hIf4AtZjbnNu/F61Dtd096xcudLo1q2bERAQYHTu3Nl48cUXXfYzT66utLTUePDBB4327dsbgYGBxmWXXWb86U9/MsrLy806xO0MK/4d9u233xq//e1vjVatWhkhISHG3XffbXz//fdeGA2aq+Y8d+FeiivmadVxz+L8mJMaxm9+8xsjOjra8Pf3Ny655BLjN7/5jfHll1+a+5tjTDzJxzAMw7PPxAAAAAAAAAAAADQNzf4dKwAAAAAAAAAAAO4isQIAAAAAAAAAAOAmEisAAAAAAAAAAABuIrECAAAAAAAAAADgJhIrAAAAAAAAAAAAbiKxAgAAAAAAAAAA4CYSKwAAAAAAAAAAAG4isQIAAAAAAAAAAOAmEisAAAAAAAAAAABuIrECAAAAAAAAAADgJhIrAAAAAAAAAAAAbiKxAgAAAAAAAAAA4CYSKwAAAAAAAAAAAG4isQIAAAAAAAAAAOAmEisAAAAAAAAAAABuIrECAAAAAAAAAADgJhIrAAAAAAAAAAAAbiKxAgAAAAAAAAAA4CYSKwAAAAAAAAAAAG4isQIAAAAAAAAAAOAmEisAAAAAAAAAAABuIrECAAAAAAAAAADgJhIrAAAAAAAAAAAAbiKxAgAAAAAAAAAA4CYSKwAAAAAAAAAAAG4isQIAAAAAAAAAAOAmEisAGpQBAwZowIAB3u4GAABogL7++mv5+Pho8eLF3u6KZRYvXiwfHx99/fXX3u4KAAAAADeRWAEAAADQpM2fP79JJWMAAADcdfjwYU2dOlUFBQXe7grQpLTwdgcAAAAAwB1xcXH64Ycf5OfnV6vj5s+fr4suukh33XWXZzoGAADQQB0+fFjTpk3TpZdeqp49e3q7O0CTwRMrAAAAACx34sQJy9v08fFRYGCgbDab5W3X1unTp3Xq1ClvdwMAAACAF5BYAZqgb775RqNGjVJMTIwCAgIUHx+v9PR0nTp1SkePHtUf//hHde/eXa1atVJISIiGDBmiTz75pFo78+bNU9euXRUUFKQ2bdqoT58+Wrp0qbn/rrvu0qWXXlrtuKlTp8rHx8elbNGiRRo4cKAiIiIUEBCghIQELViwwPKxAwCAC6/qd//evXt1xx13qE2bNrr22mslSa+//rp69+6tli1bKjw8XMOHD9e///3vam3k5OTosssuU8uWLXX11Vfrn//8Z7V3r9X0jpXCwkLdfffdateunQICAhQdHa1bb73VfGfJpZdeqj179mjTpk3y8fGRj4+PS5slJSUaO3asYmNjFRAQoMsvv1xPPfWUKisrq533mWee0Zw5c9ShQwcFBARo7969kqTPP/9cv/rVrxQeHq7AwED16dNH77zzTrUx7tmzRwMHDlTLli3Vrl07Pf744y7nAQAAjde57sVI0oEDB/TrX/9a4eHhCgoKUr9+/bR69WqXNs727rWNGzfKx8dHGzduNMsGDBigbt26ae/evbrxxhsVFBSkSy65RLNmzXI57qqrrpIk3X333eZciCVSgfpjKTCgiTl8+LCuvvpqlZSUaPTo0ercubO++eYbvfnmmyorK9OBAwf09ttv69e//rXi4+NVVFSkP//5z7rhhhu0d+9excTESJJeeuklPfDAA/rVr36lBx98UCdPntSnn36q7du364477qh1vxYsWKCuXbvq//7v/9SiRQutXLlSf/jDH1RZWamMjAyrwwAAALzg17/+tTp27KgnnnhChmFo5syZmjx5sm6//Xbde++9+u9//6t58+bp+uuv18cff6ywsDBJZ+YJmZmZuu666zRu3Dh9/fXXuu2229SmTRu1a9funOdMTU3Vnj17NGbMGF166aUqLi6Ww+HQoUOHdOmll2rOnDkaM2aMWrVqpT/96U+SpMjISElSWVmZbrjhBn3zzTf6/e9/r/bt22vr1q2aOHGijhw5ojlz5rica9GiRTp58qRGjx6tgIAAhYeHa8+ePerfv78uueQSPfLIIwoODtayZct022236e9//7t++ctfSjqTALrxxht1+vRps96LL76oli1bWvuXAAAALrjz3Yv57rvvdM0116isrEwPPPCA2rZtq1dffVX/93//pzfffNOcL9TWd999p5tuuknDhg3T7bffrjfffFMTJkxQ9+7dNWTIEHXp0kXTp0/XlClTNHr0aF133XWSpGuuucbK4QPNkwGgSRk5cqTh6+tr7Ny5s9q+yspK4+TJk0ZFRYVL+cGDB42AgABj+vTpZtmtt95qdO3a9ZznSktLM+Li4qqVP/bYY8bPLy9lZWXV6iUnJxuXXXaZS9kNN9xg3HDDDec8LwAAaFiqfvf/9re/Ncu+/vprw2azGTNnznSpu2vXLqNFixZmeXl5udG2bVvjqquuMpxOp1lv8eLFhiSXecHBgwcNScaiRYsMwzCM7777zpBkPP300+fsX9euXWucX8yYMcMIDg42vvjiC5fyRx55xLDZbMahQ4dczhsSEmIUFxe71B00aJDRvXt34+TJk2ZZZWWlcc011xgdO3Y0y8aOHWtIMrZv326WFRcXG6GhoYYk4+DBg+ccAwAAaLjOdy+mah7wz3/+0yz//vvvjfj4eOPSSy8179MsWrSoxnnB+++/b0gy3n//fbPshhtuMCQZr732mllWXl5uREVFGampqWbZzp07XeZPAKzBUmBAE1JZWam3335bQ4cOVZ8+fart9/HxUUBAgHx9z/yvX1FRoW+//VatWrVSp06d9NFHH5l1w8LC9J///Ec7d+60pG8//TbmsWPH9L///U833HCDDhw4oGPHjllyDgAA4F3333+/+ee33npLlZWVuv322/W///3P/ImKilLHjh31/vvvS5I+/PBDffvtt7rvvvvUosWPD9SPGDFCbdq0Oef5WrZsKX9/f23cuFHfffddrfu7fPlyXXfddWrTpo1LHxMTE1VRUaHNmze71E9NTdXFF19sbh89elQbNmzQ7bffru+//948/ttvv1VycrL279+vb775RpK0Zs0a9evXT1dffbV5/MUXX6wRI0bUut8AAKDhcOdezJo1a3T11VebS6VKUqtWrTR69Gh9/fXX5vKitdWqVSv97ne/M7f9/f119dVX68CBA3VqD4D7WAoMaEL++9//qrS0VN26dTtrncrKSs2dO1fz58/XwYMHVVFRYe5r27at+ecJEybovffe09VXX63LL79cSUlJuuOOO9S/f/869e2DDz7QY489pry8PJWVlbnsO3bsmEJDQ+vULgAAaDji4+PNP+/fv1+GYahjx4411vXz85Mk/etf/5IkXX755S77W7RoUeO73H4qICBATz31lB566CFFRkaqX79+uuWWWzRy5EhFRUWdt7/79+/Xp59+6pIs+ani4mKX7Z+OT5K+/PJLGYahyZMna/LkyWdt45JLLtG//vUv9e3bt9r+Tp06nbefAACg4XLnXszZ5gFdunQx95/r+LNp165dtXfctmnTRp9++mmt2wJQOyRWgGbmiSee0OTJk3XPPfdoxowZCg8Pl6+vr8aOHevy8tQuXbpo3759WrVqldauXau///3vmj9/vqZMmaJp06ZJUrVf3lV+mqyRpK+++kqDBg1S586d9dxzzyk2Nlb+/v5as2aNZs+ezUtbAQBoIn76hGplZaV8fHz07rvvymazVavbqlUrS845duxYDR06VG+//bbWrVunyZMnKzs7Wxs2bFCvXr3OeWxlZaUGDx6s8ePH17j/iiuucNn++ftQquYwf/zjH5WcnFxjGz9PGAEAAJyNu/dZqtQ0x5IkwzAs6xOAmpFYAZqQiy++WCEhIdq9e/dZ67z55pu68cYb9corr7iUl5SU6KKLLnIpCw4O1m9+8xv95je/0alTpzRs2DDNnDlTEydOVGBgoNq0aaOSkpJq56j65mmVlStXqry8XO+8847at29vllctAQIAAJqeDh06yDAMxcfHV0tQ/FRcXJykM09/3HjjjWb56dOn9fXXX6tHjx5uneuhhx7SQw89pP3796tnz5569tln9frrr0s6+02KDh066Pjx40pMTKzN0EyXXXaZpDNP35yvjbi4OO3fv79a+b59++p0bgAA0DC4cy8mLi6uxt/5n3/+ublfkrkM6s/vtfz8PkttnG0eBKB+eMcK0IT4+vrqtttu08qVK/Xhhx9W228Yhmw2W7VvLixfvtxc/7vKt99+67Lt7++vhIQEGYYhp9Mp6czNiGPHjrk8YnrkyBGtWLHC5diqb1D89LzHjh3TokWL6jBKAADQGAwbNkw2m03Tpk2rNvcwDMOca/Tp00dt27bVSy+9pNOnT5t1lixZct73ppSVlenkyZMuZR06dFDr1q1VXl5ulgUHB9f4ZZDbb79deXl5WrduXbV9JSUlLv2pSUREhAYMGKA///nPOnLkSLX9//3vf80/33zzzdq2bZt27Njhsn/JkiXnPAcAAGjY3LkXc/PNN2vHjh3Ky8szy0+cOKEXX3xRl156qRISEiSdmcdIcnnPW0VFhV588cU69y84OFhS9WQNgPrhiRWgiXniiSeUm5urG264QaNHj1aXLl105MgRLV++XFu2bNEtt9yi6dOn6+6779Y111yjXbt2acmSJeY3LqskJSUpKipK/fv3V2RkpD777DO98MILSklJUevWrSVJw4cP14QJE/TLX/5SDzzwgMrKyrRgwQJdccUV+uijj1za8vf319ChQ/X73/9ex48f10svvaSIiIgab0IAAIDGr0OHDnr88cc1ceJEff3117rtttvUunVrHTx4UCtWrNDo0aP1xz/+Uf7+/po6darGjBmjgQMH6vbbb9fXX3+txYsXq0OHDuf8luUXX3yhQYMG6fbbb1dCQoJatGihFStWqKioSMOHDzfr9e7dWwsWLNDjjz+uyy+/XBERERo4cKAefvhhvfPOO7rlllt01113qXfv3jpx4oR27dqlN998U19//XW1J3p/LicnR9dee626d++u++67T5dddpmKioqUl5en//znP/rkk08kSePHj9f/9//9f7rpppv04IMPKjg4WC+++KLi4uJYBx0AgEbufPdiHnnkEf31r3/VkCFD9MADDyg8PFyvvvqqDh48qL///e/y9T3z3feuXbuqX79+mjhxoo4eParw8HC98cYb5/2yx7l06NBBYWFhWrhwoVq3bq3g4GD17du32rvjANSSAaDJ+de//mWMHDnSuPjii42AgADjsssuMzIyMozy8nLj5MmTxkMPPWRER0cbLVu2NPr372/k5eUZN9xwg3HDDTeYbfz5z382rr/+eqNt27ZGQECA0aFDB+Phhx82jh075nKu3Nxco1u3boa/v7/RqVMn4/XXXzcee+wx4+eXl3feecfo0aOHERgYaFx66aXGU089ZfzlL38xJBkHDx406/28HwAAoOGr+t3/3//+t9q+v//978a1115rBAcHG8HBwUbnzp2NjIwMY9++fS71nn/+eSMuLs4ICAgwrr76auODDz4wevfubdx0001mnYMHDxqSjEWLFhmGYRj/+9//jIyMDKNz585GcHCwERoaavTt29dYtmyZS9uFhYVGSkqK0bp1a0OSy1zj+++/NyZOnGhcfvnlhr+/v3HRRRcZ11xzjfHMM88Yp06dcjnv008/XeP4v/rqK2PkyJFGVFSU4efnZ1xyySXGLbfcYrz55psu9T799FPjhhtuMAIDA41LLrnEmDFjhvHKK69Umw8BAIDG51z3YgzjzHzhV7/6lREWFmYEBgYaV199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56f169eb+/ft26dDhw7JbrdLkux2u3bt2qXi4mKzjsPhUEhIiBISEsw6P22jqk5VGwAAAAAAAE3Zpk2blJGRoW3btsnhcMjpdCopKUknTpxwqXfffffpyJEj5s+sWbPMfRUVFUpJSdGpU6e0detWvfrqq1q8eLGmTJli1jl48KBSUlJ04403qqCgQGPHjtW9996rdevWXbCxAgDQGNXqiZU//vGPGjp0qOLi4nT48GE99thjstls+u1vf6vQ0FCNGjVKWVlZCg8PV0hIiMaMGSO73a5+/fpJkpKSkpSQkKA777xTs2bNUmFhoSZNmqSMjAzzaZP7779fL7zwgsaPH6977rlHGzZs0LJly7R69WrrRw8AAAAAANDArF271mV78eLFioiIUH5+vq6//nqzPCgoyFwB5Odyc3O1d+9evffee4qMjFTPnj01Y8YMTZgwQVOnTpW/v78WLlyo+Ph4Pfvss5KkLl26aMuWLZo9e7aSk5M9N0AAABq5WiVW/vOf/+i3v/2tvv32W1188cW69tprtW3bNl188cWSpNmzZ8vX11epqakqLy9XcnKy5s+fbx5vs9m0atUqpaeny263Kzg4WGlpaZo+fbpZJz4+XqtXr9a4ceM0d+5ctWvXTi+//DK/0AEAAAAAQLN07NgxSVJ4eLhL+ZIlS/T6668rKipKQ4cO1eTJkxUUFCRJysvLU/fu3RUZ+eM7XpOTk5Wenq49e/aoV69eysvLU2JiokubycnJGjt2bI39KC8vV3l5ubld9Z5Ap9Mpp9NZrzGax1dU1KudGttsJqrG29zGbRXiVz/Er36IX/25G0OrYlyrxMobb7xxzv2BgYHKyclRTk7OWevExcVpzZo152xnwIAB+vjjj2vTNQAAgBqxRjkAAGjMKisrNXbsWPXv31/dunUzy++44w7FxcUpJiZGn376qSZMmKB9+/bprbfekiQVFha6JFUkmduFhYXnrFNaWqoffvih2rtus7OzNW3atGp9zM3NNRM69WU7UGBJO5K0Zr9lTTUqDofD211o1Ihf/RC/+iF+9Xe+GJaVlVlynnq9vB4AAKChq1qj/KqrrtLp06f16KOPKikpSXv37lVwcLBZ77777nN5ivanNweq1iiPiorS1q1bdeTIEY0cOVJ+fn564oknJP24Rvn999+vJUuWaP369br33nsVHR3Nk7cAAKDO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yJEj5siRI0aSWbx4sTly5Ij5v//7P2OMMa+88ooJCwszH374oTl69Kh56KGHTEJCgvnuu++sYwwZMsT07dvXHDhwwOzbt8907tzZPProo+4KyRhz47guXLhgfvnLX5qcnBxTWFhoPvroI3PXXXeZzp07mytXrljH8LS4Jk6caEJDQ83u3btNUVGR9efy5ctWm5v9zl29etX06NHDpKWlmby8PLNt2zbTvn17M3PmTHeEdNOYTp06ZebNm2cOHz5sCgsLzYcffmg6duxoBg4c6LExPfvss2bPnj2msLDQHD161Dz77LOmRYsWZseOHcYY7ztHNW4UlzeeJ8AZ3j5+cRdf/BzzdD/96U/NU089Zb0mv845ePCgadmypZk/f745efKkWbt2rWndurX5wx/+YLXx1rGzJ8jMzDS33Xab2bx5syksLDTvv/++iYiIMNOnT7fakF+gYRi7XB/jE9di7FE/jC2cw9ih/priOnBZWZmJiooyY8aMMfn5+Wb9+vWmdevW5ne/+129+kphxQGvv/66iYuLM4GBgebuu+82+/fvd3eXHPbII4+YmJgYExgYaG677TbzyCOPmFOnTln7v/vuO/Of//mfpm3btqZ169bm4YcfNkVFRW7scW0ff/yxkVTrT2ZmpjHGmOrqavPiiy+aqKgoExQUZAYPHmwKCgrsjnHu3Dnz6KOPmjZt2piQkBDzxBNPmAsXLrghmn+5UVyXL182aWlppn379iYgIMDEx8eb8ePH1xpUelpcdcUjyaxatcpq48jv3P/+7/+ajIwM06pVKxMREWGefvppY7PZmjia790spjNnzpiBAwea8PBwExQUZDp16mSeeeYZc/78ebvjeFJMY8eONfHx8SYwMNC0b9/eDB482CqqGON956jGjeLyxvMEOMubxy/u4oufY57uhxc3yK/zNm3aZHr06GGCgoJMly5dzJtvvmm331vHzp6gvLzcPPXUUyYuLs4EBwebjh07mueff95UVFRYbcgv0HCMXerG+MS1GHvUH2OLhmPsUH9NdR34s88+MwMGDDBBQUHmtttuM6+88kq9+9rCGGMcv78FAAAAAAAAAACg+eIZKwAAAAAAAAAAAA6isAIAAAAAAAAAAOAgCisAAAAAAAAAAAAOorACAAAAAAAAAADgIAorAAAAAAAAAAAADqKwAgAAAAAAAAAA4CAKKwAAAAAAAAAAAA6isAIAAAAAAAAAAOAgCisAAAAAAAAAAAAOorACAAAAAAAAAADgIAorAAAAAAAAAAAADqKwAgAAAAAAAAAA4KD/B/rJCjn2DYORAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def cond_prob(i,j):\n",
        "  Joint_vals_fitness = pd.crosstab(i,j,normalize=True)\n",
        "  product = Joint_vals_fitness.sum(axis=0)\n",
        "  cond_Prob = Joint_vals_fitness.divide(product,axis=1)\n",
        "  return cond_Prob.plt.bar(figsize=(15,6), grid=True, color=('r','g','y','grey'))\n",
        "\n",
        "def cond_prob(i,j):\n",
        "  Joint_vals_fitness = pd.crosstab(i,j,normalize=True)\n",
        "  product = Joint_vals_fitness.sum(axis=0)\n",
        "  cond_Prob = Joint_vals_fitness.divide(product,axis=1)\n",
        "  Sort_Dataframeby_Month(df=cond_p,monthcolumnname='month')\n",
        "  return cond_Prob.plot.bar(figsize=(15,6),grid=True,color=('r','g','y','grey','m','c','black'))\n",
        "\n",
        "cond_p = df[['weather','month','season','count','day']]\n",
        "\n",
        "conditions = [\n",
        "(cond_p['season'] == 1),\n",
        "(cond_p['season'] == 2),\n",
        "(cond_p['season'] == 3),\n",
        "(cond_p['season'] == 4) ]\n",
        "\n",
        "values = ['spring','summer','fall','winter']\n",
        "\n",
        "cond_p['season'] = np.select(conditions,values)\n",
        "#cond_p\n",
        "\n",
        "conditions1 = [\n",
        "(cond_p['weather'] == 1),\n",
        "(cond_p['weather'] == 2),\n",
        "(cond_p['weather'] == 3),\n",
        "(cond_p['weather'] == 4) ]\n",
        "\n",
        "values1 = ['clear cloud','mist cloud','light snowy rainy','heavy rainy']\n",
        "\n",
        "cond_p['weather'] = np.select(conditions1,values1)\n",
        "cond_p"
      ],
      "metadata": {
        "id": "oDU7mKclhrs_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "2468ba37-7690-470b-f6e9-cf7811aff7d0"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           weather     month  season  count  day\n",
              "0      clear cloud   January  spring     16  Sat\n",
              "1      clear cloud   January  spring     40  Sat\n",
              "2      clear cloud   January  spring     32  Sat\n",
              "3      clear cloud   January  spring     13  Sat\n",
              "4      clear cloud   January  spring      1  Sat\n",
              "...            ...       ...     ...    ...  ...\n",
              "10881  clear cloud  December  winter    336  Wed\n",
              "10882  clear cloud  December  winter    241  Wed\n",
              "10883  clear cloud  December  winter    168  Wed\n",
              "10884  clear cloud  December  winter    129  Wed\n",
              "10885  clear cloud  December  winter     88  Wed\n",
              "\n",
              "[10886 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bb70659c-5af4-45c6-aa74-8286ba5b3b22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>weather</th>\n",
              "      <th>month</th>\n",
              "      <th>season</th>\n",
              "      <th>count</th>\n",
              "      <th>day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>January</td>\n",
              "      <td>spring</td>\n",
              "      <td>16</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>January</td>\n",
              "      <td>spring</td>\n",
              "      <td>40</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>January</td>\n",
              "      <td>spring</td>\n",
              "      <td>32</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>January</td>\n",
              "      <td>spring</td>\n",
              "      <td>13</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>January</td>\n",
              "      <td>spring</td>\n",
              "      <td>1</td>\n",
              "      <td>Sat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10881</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>December</td>\n",
              "      <td>winter</td>\n",
              "      <td>336</td>\n",
              "      <td>Wed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10882</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>December</td>\n",
              "      <td>winter</td>\n",
              "      <td>241</td>\n",
              "      <td>Wed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10883</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>December</td>\n",
              "      <td>winter</td>\n",
              "      <td>168</td>\n",
              "      <td>Wed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10884</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>December</td>\n",
              "      <td>winter</td>\n",
              "      <td>129</td>\n",
              "      <td>Wed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10885</th>\n",
              "      <td>clear cloud</td>\n",
              "      <td>December</td>\n",
              "      <td>winter</td>\n",
              "      <td>88</td>\n",
              "      <td>Wed</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10886 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb70659c-5af4-45c6-aa74-8286ba5b3b22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bb70659c-5af4-45c6-aa74-8286ba5b3b22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bb70659c-5af4-45c6-aa74-8286ba5b3b22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-95f027ff-b110-4204-96eb-0d2413a273c3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95f027ff-b110-4204-96eb-0d2413a273c3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-95f027ff-b110-4204-96eb-0d2413a273c3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d60e26db-4c23-4765-97c0-f728d0e99b0b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cond_p')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d60e26db-4c23-4765-97c0-f728d0e99b0b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cond_p');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cond_p",
              "summary": "{\n  \"name\": \"cond_p\",\n  \"rows\": 10886,\n  \"fields\": [\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"mist cloud\",\n          \"heavy rainy\",\n          \"clear cloud\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"November\",\n          \"October\",\n          \"January\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"summer\",\n          \"winter\",\n          \"spring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181,\n        \"min\": 1,\n        \"max\": 977,\n        \"num_unique_values\": 822,\n        \"samples\": [\n          626,\n          256,\n          79\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Sat\",\n          \"Sun\",\n          \"Thu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cond_prob(cond_p['month'],cond_p['day'])\n",
        "plt.title('Monthly probability of electric cycle renting on day-basis',fontsize=20)\n",
        "plt.xticks(rotation=45)\n",
        "plt.figure(figsize=(7,5))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5Oe0lEqymxGC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 639
        },
        "outputId": "75abdf5c-d3ae-490c-99ae-85d30c4de338"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observation from above plot.\n",
        "- Highest probability of renting electric cycles on sundays falls on apr, dec, jan, jul, jun, sep.\n",
        "- Lowest probability of renting electric cycles on sundays falls on aug, feb, mar, may, nov, oct.\n",
        "- Highest probability of renting electric cycles on mondays falls on apr, dec, jan, jul, oct, sep.\n",
        "- Lowest probability of renting electric cycles on mondays falls on feb.\n",
        "Highest probability of renting electric cycles on tuesdays falls on apr, jul, may, oct.\n",
        "- Lowest probability of renting electric cycles on tuesdays falls on aug, dec, feb, jun, mar, nov, sep.\n",
        "- Highest probability of renting electric cycles on wednesdays falls on aug, feb, jan, may, oct.\n",
        "- Lowest probability of renting electric cycles on wednesdays falls on apr, dec, jul, jun, mar, nov, sep.\n",
        "- Highest probability of renting electric cycles on thursdays falls on aug, feb, mar, nov.\n",
        "- Lowest probability of renting electric cycles on thursdays falls on apr, dec, jan, jul, jun, oct, sep.\n",
        "- Highest probability of renting electric cycles on fridays falls on aug, feb, jun, mar, nov.\n",
        "- Lowest probability of renting electric cycles on fridays falls on jan.\n",
        "- Highest probability of renting electric cycles on satardays falls on dec, feb, jun, mar, nov, sep.\n",
        "- Lowest probability of renting electric cycles on satardays falls on apr, aug, jan, jul, may, oct."
      ],
      "metadata": {
        "id": "B0aPQKkzoILo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "weather_df.plot.bar(figsize=(15,7),color={'black','m','grey'})\n",
        "plt.grid()\n",
        "plt.title('Users with respect of weather.',fontsize=20)\n",
        "x1 = [0,1,2,3]\n",
        "values1 = ['clear cloud','mist cloud','light snowy rainy','heavy rainy']\n",
        "plt.xticks(x1,values1,rotation=45)\n",
        "plt.figure(figsize=(7,5))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "esP8N8w1m2Qd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 727
        },
        "outputId": "ab9a50ef-25f9-40c4-c4cf-5a368ba92fc9"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABMIAAAK1CAYAAAAqgELjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACYm0lEQVR4nOzdd3gUVf/+8XsTUoEkhpIQCSQqUpQmKOQBpHeREhUVMYiIIqCACKIoTQEBEZUiKM2CYEWaQOjSmyACItKRFBVJKCmbZH5/8Nv5ElJIgw3M+3VdXA87c2bmM7uz52Fvz5yxGYZhCAAAAAAAALjFuTi7AAAAAAAAAOBGIAgDAAAAAACAJRCEAQAAAAAAwBIIwgAAAAAAAGAJBGEAAAAAAACwBIIwAAAAAAAAWAJBGAAAAAAAACyBIAwAAAAAAACWQBAGAAAAAAAASyAIAwAAuWaz2WSz2TR8+PB87Wf48OHmvoAbITU1VR988IEeeOAB+fj4mNdfhw4dnF3aTSskJEQ2m03dunVzdikAAFwTQRgAwKm6detm/hA9fvx4jrZx/OgKCQm5rrUBuPU88cQT6tevn3bs2KHz5887uxwAAHCDEYQBAIACtW7dOjPcXLdunbPLgZM4Qu7CFFhv3rxZ33zzjSSpbdu2ioyM1K+//qp9+/bpww8/dHJ1hUth/PwAACgIRZxdAAAAuPkYhuHsEoBcW7VqlSTJ1dVV8+bNk4+Pj5MrAgAANxojwgAAAGAJf/31lyQpICCAEAwAAIsiCAMAAIAlJCUlSZLc3NycXAkAAHAWgjAAwC0nMTFRH374oRo1aqRSpUrJzc1N/v7+qlixolq3bq2JEydmOzF/amqq5s6dq4ceekhBQUHy8PBQiRIlVL9+fU2cOFEJCQlZbtuoUSPZbDY1atRIknT48GH16dNHFSpUkLe3d4aHAuS31sz8/fff5hxdH3/8caZtrnxIQb9+/TJtM3bsWNlsNrm5uenChQvp1mX21Mjjx4/LZrOpcePG5rLGjRubbR1/5syZk2XtiYmJGj9+vO677z4VL15cxYsX1wMPPKDJkycrJSUlx+9BZq6uec2aNXr00UcVHBwsNze3TOdCio6O1htvvKHatWvL399fHh4eCg4O1mOPPWbeZpeV1NRUzZkzRy1btlRgYKDc3d3l6+urChUqqGnTpho9erQOHDiQYbur52b666+/NGDAAN19993y9vZWqVKl1LZtWy1fvjxH5x0XF6cxY8aoXr16KlWqlNzd3VWmTBm1a9dO3377bY5ucz1//rzee+89NWnSxDwXHx8f1axZU3379tWmTZvMto4ngc6dO1eSdOLEiQzXQH6eErpv3z717NnT/E4VL15c99xzj/r375/ld8VxzOxqyqmHHnpINptNdevWzXT9lXPk+fv7Ky0tLUOb6Ojoa35H89MPpaWlac2aNRo4cKDq1aunkiVLys3NTX5+fqpRo4YGDhyokydPZrptQXx+hw4d0nPPPaeQkBB5eHgoICBAHTt21NatW7PdzuHPP/9U//79VbVqVfn6+srLy0t33HGHunXrpp07d2a53dXzE6alpWnWrFlq3LixAgIC5OLiwpMtAQCSAQCAE0VERBiSDEnGsWPHcrRN+fLlDUlG+fLlM6w7c+aMUaVKFXOfWf155ZVXMt33iRMnjOrVq2e77V133WUcOnQo0+0bNmxoSDIaNmxoLFy40ChatGiG7R3nmd9as+PYb+fOnTNdHxISYu6/evXqmbZp1aqVIcmoU6dOhnWObYcNG2YuO3bs2DXPRZIxe/Zsc5thw4aZy6Ojo40aNWpkuV27du2M1NTUXL8XmdX8+uuvZ9j/1dfTF198kennd+WfZ5991rDb7RmOdf78eaNBgwbXfC/Cw8MzbOv4TpQvX97YsWOHUbp06Sy3HzBgQLbnvGrVKqNEiRLZ1tCmTRvj/PnzWe4jMjLSKFmy5DXPxeHKzzQn7XNj9OjRhouLS5b79PDwMObOnZthu4KsZ9y4cYYko0iRIpm+b8OHD0+3319++SVDm/nz55vrDx48mGF9fvuhnHwG3t7exvfff5+nba9+vxx9ckREhPH9998b3t7emW7j6upqzJ8/P9v3d/z48Yabm1uWx7XZbMabb76Z6bZr16412/30009Gs2bNMmwfERGR7fEBALc+JssHANxS+vbta46yeeqpp9SpUycFBQXJ1dVVUVFR2rlzp3788cdMt/33339Vv359nTp1Sh4eHnruuefUsGFDhYSE6MKFC1q5cqU++OAD/fnnn2rdurV2794tX1/fTPd18uRJPfXUU/L29tabb76pBg0ayNXVVTt27FCxYsXyXeu1NGrUSAcOHND69eszrDtx4kS6kTO//vqrzp49K39/f3NZSkqKOcqnYcOGOTrm7bffrn379mnHjh3q3r27JGnWrFm6//7707UrW7Zsptt36tRJBw4c0EsvvaR27drJ399fhw4d0qhRo3Tw4EEtXrxYn3zyiZ5//vkc1ZOV77//Xvv27VPVqlXVv39/3XvvvUpISNCePXvMNl9//bW6du0qwzB0xx13qE+fPqpSpYpKlSql48ePa+bMmVq2bJlmzpwpHx8fTZw4Md0xhg8frp9//lnS5RFEXbp0Ubly5eTp6anY2Fj98ssvWrJkSbYjay5duqRHH31UcXFxeu2119SmTRt5eHho27ZtGjNmjKKiojRx4kSVK1dOL7/8cobtN23apNatW8tutysgIEB9+/ZV9erVFRQUpDNnzmjBggX64osvtGzZMkVEROi7777LsI+1a9eqdevWSklJkaurq7p27ar27durXLlySkxM1IEDB/TTTz9p8eLF5jYvvviiHnnkEQ0dOlQ//vijgoKCtGLFitx+TBlMnTpVr7/+uiSpVKlSGjx4sOrVq6fU1FStWrVK48eP18WLF9WtWzeVLFlSbdq0Mbfdt2+fJBVITY7RnikpKdq4caNatWqVbv3VT0pdt26datSokWmbgIAAVapUKd26guiHUlJSVKZMGXXs2FFhYWG644475OnpqVOnTmnz5s2aOnWqLly4oCeffFK7d+9W5cqVzW3z8/nt27dPCxYsUJkyZfTKK6+odu3aMgxDK1as0NixY5WYmKiePXuqSZMmKlWqVIbtx48fr0GDBkmSqlWrpl69eqlChQry8/PToUOHNHnyZG3ZskWjRo1SyZIl9dJLL2VZy+DBg/Xrr7/q4YcfVrdu3VS+fHnFxMQoPj4+R+cCALiFOTuJAwBYW0GOCEtISDBHElxrFNW///6bYdmTTz5p7vfo0aOZbrd7925zlNDrr7+eYb1jRJgkIygoyDhx4kSm+8lvrdeyYMGCLEeczJ0715Bk3HPPPUZoaKghyfjhhx/Stdm2bZu5/bJlyzLs37HuyhFhDleOyli7dm22dV45+sTNzS3T9v/++68REBBgSDKqVat2rVPPkq4YFdK0aVMjMTEx03Z///234evra0gyunfvnumIL8MwzFFlLi4uxu+//55uXXBwsCHJeOSRR7KtKbPP9srvhJubm7F+/foMbf766y+jbNmyhiSjaNGiRmxsbLr1ycnJ5qi/Vq1aGRcvXsz0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Ndq5c6eSk5O1f/9+7d+/XxMnTtQXX3yh9u3bZ7rP7G4PuxbHebRu3Vrjxo3L834Km/y8JwWpSJEiqlevnlasWGGGXDt27FBCQoJ8fX3NkXqOsMsxT9jZs2fNJ8VmFoQVRD/0zz//6Mknn9SlS5dUrFgxDRw4UC1bttSdd94pX19f81pds2aNmjZtKinn/xHiernye/fWW29le1v5lTL7/wAHbosEAGSFIAwA4FRX3vIWHR2d4VahqyUlJZm3DmY30fgDDzxgTgJ+/vx5rVu3TnPmzNH333+v2NhYhYeH68iRI2YQV6JECbNt5cqVb+iPqNzWmlOBgYG6++679ccff2jdunV64YUX0t265dCoUSPNmTPHXOf43xo1asjX1ze/p3dTufKaMgxD9957b772V6VKFY0aNUqjRo1SYmKiNm7cqHnz5umzzz7ThQsX9MQTT+jIkSOZjrr6999/lZqamu216BhVdvV3oUSJEjpz5oySk5PzfA4lS5bU6dOnFRUVlaftC5K/v7+ioqKuOYpO+r/b5fLykIncaNiwoVasWGHOE+b43tSvX9/8zOrWrStPT09znrAjR46YoVNmoy0Loh/69ttvzT7yhx9+ULNmzTJtdz1HzOWW47ylyyFyfr93AABkh1sjAQBOdeU8Lrt27bpm+71795qjB3I6B0zx4sXVrl07fffdd3rppZckSVFRUenm9nGM4EhKSjLnn3GGnNSaG1fOE/bXX3/pzz//NOcHu7rNr7/+qn/++Sff84MVllE7eeHu7q577rlHkrRp06YC3benp6eaNWumWbNmafz48ZIuj4J0TEp/teTkZO3duzfL/aWkpJjzmV0dHDiuZ8cotLy47777zH3kZcL/grwOHOe3e/fubG9djY2NNW8FvN5hytXzhGU22vLqecIcbUqWLGleZ1cqiH5o//79ki4HgVmFYJKuuf8b+T2+4447zNC9oL93AABcjSAMAOBUDRs2VJEilwcoz58//5q36HzxxRfm3x239eTGldtcOUF0u3btzB9+kyZNyvV+r4esas2NK+cJmz59uqT/mx/MoXz58goJCZFhGPrwww/N0SR5nR/syocEJCUl5WkfzvTwww9Lkn7//XetWLHiuhwjp5/t3Llzs1z3ww8/6L///pOkDIGH4xzi4uI0e/bsPNXomL/u0qVLmjFjRq63d1wHBXENOM7v3Llz+v7777NsN3PmTLMPyS4EKgi1a9c2b82LjIzU5s2bJWX83lw5T5hj1NiDDz6YadBUEP2QIyhMTExUWlpapm0uXbqkzz//PNv9FOTndy2urq5q06aNJGnlypU6ePDgdT8mAMC6CMIAAE4VEBBgzgeze/dujR07Nsu2a9as0ccffyxJCgkJMX/sOxw9ejTdExIzs3LlSvPvV86rU7FiRbOO+fPna+LEidnu59ixY/rqq6+ybZOd/NSaG1f+KP/www8zLHNwBGaONi4uLmrQoEGejnnlbX5HjhzJ0z6c6eWXXzYnQn/mmWfMETZZWbp0qX799Vfz9dmzZ7V48eJsQ92cfrbTpk3LdDRgdHS0Bg4cKOnyBOWOp1Q6REREKDg4WJI0cOBA80EIWblyRJPDU089pdtvv12S9MYbb2R7vZ4+fTrDMsd1EBsbm+8nfT7zzDPmROyvvPKK/vrrrwxt9u7dq9GjR0uSbr/9dnXo0CFfx7wWNzc3/e9//5N0OYC7ePFiuvnBHBzfrTVr1phPssxqtGVB9EMVKlSQdDns+vrrrzNsk5qaqh49eujMmTPZ7rsgP7+cGDJkiFxdXZWWlqZHHnkk02vKITU1VV9++WW2bbLTqFEj8wmUx48fz2PFAICbFXOEAQCc7r333tPq1asVGxur119/XevWrdNTTz2lu+++W0WKFNHp06e1ePFizZ07VykpKXJxcdGsWbMyzJ9z8uRJNW7cWFWqVFHHjh1Vu3Zt84f8qVOntGDBAvOHYY0aNVSnTp1020+bNk07d+7U0aNH9corr+jHH3/U008/rXvuuUceHh76999/tXfvXi1fvlxr1qxRx44d9cQTT+TpnPNba04FBQXprrvu0p9//mk+gTKzIKxRo0aaO3eu2aZ69ery8/PL0zHLlSunsmXL6vTp05owYYLKli2rihUrmp9XQECAihcvnqd93wgBAQGaO3euHnnkEUVFRal27drq1q2bWrdurbJly8put+v06dPavn27vv32Wx09elSLFy82b9WNj4/Xww8/rJCQEHXq1El16tRR+fLlVaRIEUVFRWnx4sX69NNPJV0ObB566KFM6yhVqpS8vb3VvHlz9e/fX23atJGHh4e2b9+u0aNHm0HGqFGjMjxN0cPDQ19//bUaNWqkCxcuqEmTJnr88cfVoUMHhYaGKi0tTVFRUdq1a5d++OEH7du3Tx999FG6gMbT01Off/65WrRooUuXLqlZs2bq2rWrOnTooLJlyyopKUm///67li1bpkWLFmUYOeQIidLS0vTCCy+ob9++KlmypLn+rrvuyvFnUqpUKY0fP169e/fW6dOnVatWLb322mv63//+p5SUFK1atUrjx4/XhQsXZLPZNGPGDLm5ueV4/3nVsGFDRUZGmt+bK+cHc6hbt648PDzShUnZjbbMbz/02GOP6fXXX1dSUpKeeeYZ7dmzR82bN5evr6/279+vjz76SLt27VK9evWyvQ2xID+/nKhataomTJig/v3768CBA7r33nvVs2dPNWnSRAEBAUpMTNTx48e1ZcsWffvtt4qKitK+fftUtmzZAq0DAGABBgAAhcDvv/9uVK5c2ZCU7R8/Pz9jyZIlme5j7dq119xeklGpUiXj6NGjme4jKirKaNCgQY7288wzz2TYvmHDhoYko2HDhtmeb0HUmlM9evQw92ez2YzY2NgMbY4dO5buuP369ct2n452w4YNy3T91KlTszyn2bNnm+2GDRtmLs/Ole/X2rVrr3XKear5aosWLTL8/f2v+Rm5uLgYa9asMbe7+r3M6k+ZMmWMnTt3ZjhuRESEIckoX768sWPHDqNkyZJZ7uOll17K9hy2bNliBAcH56ieuXPnZrqP5cuXG7fddts1t79aamqqUbdu3Ry3z4l33nnHcHFxyXKfHh4eWZ6HYaR/bwvCxo0b0x1//PjxmbZz9AuSDH9/fyMtLS3b/ea3H5o1a1a271Pnzp2NVatWZfudys3nV758eUOSERERke155eT9nzFjhuHt7X3N83Z3dzcOHz6cbtuc9hNXfh7Hjh3LtmYAwK2HEWEAgEKhYsWK+vXXX7VgwQItXLhQO3bs0N9//62UlBT5+/vrnnvuUatWrfTcc89l+STDBg0aaN26dVqxYoW2bt2qU6dOKSYmRomJifL391f16tXVqVMndevWTR4eHpnuIzAwUBs2bNDSpUv11VdfacuWLYqOjpbdbpefn58qVKigsLAwPfzww3rwwQfzfL4FUWtONWzY0ByBdPX8YA4hISEqX768OdF4XucHc+jVq5cCAgI0ffp07dmzR2fPns12kvPCqF27djp27Jg++eQTLVu2TPv379fZs2dVpEgRBQYG6p577lGTJk30yCOPmLchSpfnXNu+fbuWLVum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gIAAde3aVf/884+5zfnz59WlSxcVLVpUZcqU0fvvv69GjRqlG9F15a2GhmFo+PDhKleunDw8PBQUFKSXXnrJPP6JEyfUv39/2Wy2dKPoNm7cqAYNGsjLy0vBwcF66aWXdPHixXTHGDVqlJ5++mn5+PioZ8+eOdouNjZW7dq1k5eXl0JDQ/Xll19ej7c2A4IwAAAAAAAAJ5s7d67c3d21adMmjR07Vk2aNFHNmjW1c+dOLV++XDExMXrsscfM9gMGDNCmTZu0aNEiRUZG6ueff9bu3buz3P93332n999/X9OnT9fhw4e1cOFCVa1aVZL0/fffq2zZsho5cqSioqIUFRUlSTpy5IhatWql8PBw/frrr1qwYIE2btyoPn36pNv3hAkTVL16df3yyy968803c7Rdt27ddOrUKa1du1bffvutpk6dqtjY2IJ8SzPFHGEAAAAAAABOVqFCBY0bN06S9Pbbb6tmzZoaPXq0uX7WrFkKDg7WH3/8oTJlymju3LmaN2+emjZtKkmaPXu2goKCstz/yZMnFRgYqGbNmsnNzU3lypXTAw88IEny9/eXq6urihcvrsDAQHObMWPGqEuXLuYoswoVKujDDz9Uw4YNNW3aNHl6ekqSmjRpoldeecXcrkePHtlud/LkSf3000/avn277r//fknSzJkzVbly5Xy+i9dGEAYAAAAAAOBktWrVMv++d+9erV27VsWKFcvQ7siRI0pISJDdbjeDLEny9fVVxYoVs9z/o48+qkmTJumOO+5Qq1at1KZNG7Vr105FimQdDe3du1e//vprutsWDcNQWlqajh07ZgZXtWvXztV2f/zxh4oUKZLunCtVqiQ/P78saykoBGEAAAAAAABOduXTHS9cuKB27drp3XffzdCuTJky+vPPP3O9/+DgYB06dEirVq1SZGSkXnzxRY0fP17r16+Xm5tbpttcuHBBzz//vDmX2JXKlSuXae052e6PP/7Idf0FhSAMAAAAAACgELnvvvv03XffKSQkJNMRW3fccYfc3Ny0Y8cOM5CKi4vTH3/8oQcffDDL/Xp5ealdu3Zq166devfurUqVKmnfvn2677775O7urtTU1Ax1HDhwQHfddVeu689uu0qVKiklJUW7du0yb408dOiQzp07l6vj5AWT5QMAAAAAABQivXv31tmzZ/XEE09ox44dOnLkiFasWKFn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mjdvnm4aCgDWduXtkL/88ouOHj2qRYsWadq0adq8ebOCgoL05Zdfavr06em28/Dw0KhRo+Tr66uZM2c6o3Q4GUEYkAM2m00///yz9u/fL5vNZv4o/eabb9S0aVM9/vjjWrVqle666y516NBBn3/+ucaOHUsIBqBA2Gw2bdu2TQcPHjSX1apVS6+++qpq166tiIgIbdq0SeXLl9fbb7+t+fPna9asWapataoTqwaAy8aOHasjR46Yr+fNm6eWLVtqw4YN6UZ+ffLJJ3rggQc0a9YszZ07V3FxcbLZbGZ4FhcXZ84nBsC63n33XcXFxZl9w7x58/TCCy9ox44dCgkJkSQFBQVpzJgxKl++vL788kvNmDFDklSkSBGlpaVJkm677Ta5uro65RzgXARhQA6kpqZqyJAhatq0qQ4ePJguDPv6669VuXJlvfzyy1q+fLlSU1OdXC2AW80///yjt956S507d9ahQ4fM5bVr19bLL7+sokWLqkePHtq0aZPc3NwkXf6HHgA427Jly7Rnzx7zx6kkPfroo6pdu7ZOnDihjRs3KikpyVw3Y8YM1a1bV++88445F6thGNqzZ4/279+vp59++kafAoBC5KuvvtL+/ftVrFgxc9ndd9+tokWL6tixY1q9erW5vFy5chozZoxCQkL0/vvva+HChZIuj0zduHGjNm3apDZt2tzoU0AhwBxhQA6dO3dOHTp00OnTp/Xjjz+mG+31wgsv6NNPP1VoaKj27t0rb29vJ1YK4Fa0cOFCffrppzp79qxmzZqlSpUqmesee+wxrVixQnfeeac2bdokT09PnoIEoNBwzAu2dOlSBQQEqHbt2kpJSVHHjh118uRJDR06VO3bt5e7u7u5zbvvvquBAweaozUuXLighIQElSpVylmnAaCQuLJPqV27tgICAnTgwAG9/PLLMgxDffr0UYcOHcz2x44d0+eff6433njD7FPS0tIUFRWl22+/3UlnAWciCAMy4Zh08dKlS0pLSzP/i8OlS5fUvHlzxcbGauHChapUqZJcXV01aNAgderUSeXLl1eZMmWcXD2Am52jD0pNTVVKSoo8PDwkSatWrdK4ceN08eJFzZ07V3fddZckqV+/frr33nvVvn17fiQCKDQcfZlhGNq3b586dOigRo0a6eWXX1b16tVlt9v18MMPKzo6Wq+//nqGMEy6PCqfW5cASOknxt+6daueeeYZhYWF6d1331WpUqW0d+9evfLKK3J1dVWvXr3ShWEO9CmQCMKADBwd7JIlSzR9+nQdOnRIDRo0UFhYmHr06KFLly6pZcuWOnz4sDp27KiLFy9q0aJF+uWXXxQaGurs8gHc5Bx90PLlyzVnzhz99ddfuvfee9WzZ0/VrFlT69at05gxY3T48GH17NlTR48e1YoVK7Rx40YFBwc7u3wAyNLMmTM1ffp0Va9eXb1791aNGjVkt9vVoUMHxcTE6KWXXtKTTz7Jrd0ArskwDI0bN05LlixRpUqVNHr0aJUqVUp79uzRoEGDVKRIEXXt2lVPPPGEs0tFIcQcYYDSP5HNZrNp6dKlCg8PV82aNdWlSxclJibq7bff1ogRI+Tt7a2ff/5ZnTp10okTJxQTE6MNGzYQggEoEDabTYsXL1b79u3l5+enevXqac2aNerdu7cWLFigRo0aaezYsWrVqpXmzp2rw4cP68cffyQEA1BoOCaivtqzzz6r559/Xrt379aUKVO0Z88eubm5aeHChXJxcdHatWsJwQBkkFmfYrPZNGjQILVr10779+/X66+/rr///ls1atTQ+PHjFRUVpR07djihWtwMGBEG/H8pKSkqUqSILl26pC5duqhKlSp65513JEnR0dGaN2+ePvroIw0fPlwRERGSlOG2JQDIrYsXL6po0aIyDEOGYSg+Pl4PPfSQ2rRpo9dff12S9N9//6lHjx6KiorSJ598Ys5R+O+//8rT01NFixZ15ikAgMkxd48kzZ8/X7///ruKFSum+vXrq27dupKkTz/9VNOmTVOtWrXUu3dvVa9eXampqemeEAkAUvo+ZdGiRTp06JDKlCmje+65RzVr1pRhGBo/frwWLlyoe++9V++8845KlSqlP//8U3fccQd9CjLFVQFLmz59umrXri3p8hPWDMOQq6urjhw5ku4JRoGBgXryySdVo0YN7d6921zu6upKCAYgz2bNmqUhQ4YoKirK/AHo4eGh8+fPy9fXV5Jkt9t12223aebMmYqKitKcOXPM7UuUKEEIBqBQcfzoHDx4sF5++WUdOHBAX331lYYMGaLp06dLknr06KHevXtrz549GjVqlA4fPixXV1e5uLhkOZoMgPUYhpGuT+ndu7cWL16s6dOnq2/fvlq2bJlsNpteffVVdezYUQcPHlSvXr3033//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Bgaybt066tevj4ODg/lYbGws/v7+HDhwgPXr19OsWTMLVioieV1sbCw+Pj6kpaWRmJhIaGgof//73wG4ceMG48eP5/Tp07z77ruMGjUq17WPB+0ieZ2CMMlzfvnlF+Lj47GyssLFxSXXnQYRERERgYSEBDp16oSvry+9evUiMTGRy5cvExoaiqurK927dychIYEBAwZQqFAhtm/fbumSRSSPi42NZeTIkURERDBz5kyGDx9uPpaUlERAQAB79+5l6tSpeHp6WrBSkT9GQZiIiIiIyHPm8uXLuLm5MXbsWMqUKcPGjRs5ffo0t2/fplChQgwYMIARI0Zw8eJFnJ2d1bdHRP4rly9fZujQody5c4fBgwfj5eVlPnb9+nWCg4MZM2aMejfLc01BmIiIiIjIc6hfv3589913JCYmMmzYMNq2bUvr1q1xc3OjQYMGzJw503yudnITkf9WbGwsw4YN4/79+wwcODBXGGaSmZmpMEyeW+pmJyIiIiKSRz2t944p1AoODubQoUMULVqUmjVrmo9nZmZSuHDhXNcoBBOR/5aLiwuLFi1i+PDhrFy5kvv37zNgwIBc5ygEk+eZVoSJiIiIiORxycnJlCpVyvzz4yu8UlJSuHLlCmPGjOHy5cscP35cO7iJyB8SGxtLz549adiwIZ999pmlyxF5ZhSEiYiIiIjkMdu2bcPFxYVatWoxbtw4DAYDkyZNwtbW9qnnb9q0iZkzZ1KyZEl27NiBra2tHl0SkT8sISEBJycnrSqVfEVBmIiIiIhIHnLr1i28vb35/vvv6dixIxs2bODw4cPUrl37d6+LiIigZcuWGAwGjEajVoSJyDOjPoOSnygIExERERHJY+Lj43njjTe4fv06a9asoVu3bmRkZDx1RdjjfcS0EkxEROS3KdIVEREREckjct6jrly5Mk2aNMHX15cTJ06YH3d8/D724830FYKJiIj8Nq0IExERERGxsKet4nr48CHx8fH4+/tz5MgRduzYQd26dc3Hr127RtmyZf/iSkVERJ5vCsJERERERCwkIyMDGxsb86qutWvXkpSUhKOjI//4xz8AOHnyJBMmTODYsWNs27aNevXq4eXlRe3atRk/frwlyxcREXnuKAgTEREREbGAHj16YG1tTXBwMIUKFWL8+PEsXrwYV1dXjh49ioeHB4sXL6Z06dKcOnWKiRMnEhYWRr169UhOTubs2bO/uYukiIiIPJ16hImIiIiIWICnpydbt27F19eXixcvcujQIaKjo/nuu+84evQou3fvpl+/fiQmJuLq6sry5csJCQnBy8uLc+fOYWtri9FotPSvISIi8lzRijAREREREQvZtWsXXbp0oV27dtjY2BAcHIyDgwPw6JHIt956i6ZNm7Js2bIn+oFpd0gREZH/nYIwEREREZG/0OMB1s6dO+nduzcvvPAChw8fpnz58mRlZWFtbc2pU6do2bIlVatWJSwsjBdffNGClYuIiDz/9GikiIiIiMhfyBSCxcXFkZ6ezttvv826deu4efMmkyZNIi0tDWtra7Kzs3F1deWbb77B0dGRUqVKWbhyERGR55+CMBERERGRv0BWVpb53+vXr6dOnTrs3buX9PR03Nzc2LhxI//85z8ZOXIkaWlpWFlZkZWVRd26ddmxYwfW1ta53kNERET+dwrCRERERET+ZKZHHeFRCJaWlkZqair+/v5ERUWRkZFB+/btCQ0NZdWqVfj5+fHgwQPzNSaP/ywiIiL/G32SioiIiIj8yUwBVkBAAEOHDsVoNDJt2jTs7e3p27cv+/btyxWGBQYGsmTJEgtXLSIikv+oWb6IiIiIyJ/g2rVruXZ6jIuL480332TOnDl4enoCj1aKtW7dmvPnzxMcHEzz5s2xs7Pj4MGDNGzYEBsbG0uVLyIiki9pRZiIiIiIyDPWuXNnNmzYkOu1zMxM0tPTzeFYeno61tbWbNu2DVtbW/z9/dm/fz/Z2dk0adIEGxsbjEajJcoXERHJtxSEiYiIiIg8Y56engwePBiAlJQUAKpUqULx4sVZsWIFAHZ2dhiNRmxsbKhevToJCQm89957XLt2DYDs7GytCBMREXnGFISJiIiIiDwj+/btA6Bnz57Y2dmxcOFCAgIC+PnnnwGYPHky33//PaNHjwbAxsYGW1tbXnzxRSIiIrC3t2fcuHEAWFlZWeaXEBERycd0i0lERERE5BmYMWMG69atY/z48Xh5eQHw8OFDNmzYgKOjIz4+PnTq1ImEhATmzJnD0aNHqVevHocOHSIlJQVXV1caN27MzZs3LfybiIiI5F9aESYiIiIi8gx4eHhQqVIlgoKC+OqrrwDw9/fno48+IiQkhAULFpCamsrQoUPZuHEjxYsXJy4ujurVq/PDDz9gZWXFnTt3KFu2LFlZWWhPKxERkWdPu0aKiIiIiDwjsbGxDBs2jPv379OvXz+8vb0BWLRoEbNmzcLb2xsfHx8qVKiQ67qHDx8SEBDAl19+SVRUFNWrV7dE+SIiIvmeHo0UEREREXlGXFxcWLRoEcOGDSM4OBgAb29vhg0bBsDs2bMxGAz07duXqlWrAnDmzBlWr15NeHg433zzjUIwERGRP5FWhImIiIiIPGO/tTJs8eLF+Pr6snjxYvOukgDHjx+nXLlylCtXzlIli4iIFAgKwkRERERE/gQ5w7D+/fvTu3dvADZt2kTXrl0xGAxkZ2drd0gREZG/kIIwEREREZE/SWxsLMOHDyctLY1u3boxaNAg87HMzEwMBoMFqxMRESl4tGukiIiIiMifxMXFhc8++4y7d+9y6tSpXMcUgomIiPz1tCJMRERERORPlpCQgJOTE9bWug8tIiJiSQrCRERERET+IllZWQrDRERELEhBmIiIiIiIiIiIFAi6HSUiIiIiIiIiIgWCgjARERERERERESkQFISJiIiIiIiIiEiBoCBMREREREREREQKBAVhIiIiIiIiIiJSICgIExERERERERGRAkFBmIiIiIiIiIiIFAgKwkREREREREREpEBQECYiIiIiIiIiIgWCgjARERERERERESkQ/g8rzSxhVeUJXQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observation from above plot\n",
        "\n",
        "- Registered uers are almost double than casual users.\n",
        "- Least electric cycle renting can be seen on heavy rainy weather.\n",
        "- Maximum electric cycle renting can be seen on clear cloudy weather."
      ],
      "metadata": {
        "id": "OB9aYGp-qOUe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "cond_prob(df['weather'],cond_p['season'])\n",
        "x1 = [0,1,2,3]\n",
        "values1 = ['clear cloud','mist cloud','light snowy rainy','heavy rainy']\n",
        "plt.xticks(x1,values1,rotation=45)\n",
        "plt.title('Probability of electric cycles renting of seasons according to weather ',fontsize=20)\n",
        "plt.figure(figsize=(7,5))\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "Y73bWwVRouK5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "outputId": "6ed0cac0-7f60-45f9-9eeb-c5ca8eda8f33"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observation from above plot.\n",
        "\n",
        "- On clear cloudy weather all four seasons have above 60% of probability of renting eletric cycle.\n",
        "- On heavy rainy weather all four seasons have 0% of probability of renting eletric cycle.\n",
        "- On mist cloudy weather all four seasons have between 20-30% of probability of renting eletric cycles.\n",
        "- On light snowy rainy weather all four seasons have nearly 10% of probability of renting cycles."
      ],
      "metadata": {
        "id": "kY3ac3MRr7Id"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "S6TNHL6pvcWe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa46d2a2-6536-43db-c9c5-981727993de9"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['datetime', 'season', 'holiday', 'workingday', 'weather', 'temp',\n",
              "       'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count',\n",
              "       'year', 'date', 'month', 'day'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "windspeed_df = df.groupby('windspeed').nunique().reset_index()\n",
        "windspeed_df = windspeed_df[['windspeed','count','humidity','temp','atemp']]\n",
        "#windspeed_df"
      ],
      "metadata": {
        "id": "TLplJmlRrfZl"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.scatterplot(data=windspeed_df, x ='windspeed', y='count',hue='atemp')\n",
        "plt.title('Correlation between count and windspeed.',fontsize=20)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "V9SQwpWzvjPf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "outputId": "1a4b2f3c-8a65-42ac-93a7-2efbfaf43856"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observations from above scatterplot\n",
        "\n",
        "- It can be concluded that with the increase of windspeed Yulu's user count drastically fall.\n",
        "- As windspeed increases atemp falls to its lowest."
      ],
      "metadata": {
        "id": "dN4xMwM0A2gp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "month_df = df.groupby('month').nunique().reset_index()\n",
        "month_df = month_df[['month','count','casual','registered']]\n",
        "month_df = Sort_Dataframeby_Month(df=month_df,monthcolumnname='month')"
      ],
      "metadata": {
        "id": "xidT2OE7xsr5"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "month_df"
      ],
      "metadata": {
        "id": "F8oDWUmoyIMC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "outputId": "50531044-f5ff-4f5e-e305-757823effdfc"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        month  count  casual  registered\n",
              "0     January    257      62         246\n",
              "1    February    292      70         273\n",
              "2       March    339     139         321\n",
              "3       April    410     180         347\n",
              "4         May    450     172         383\n",
              "5        June    460     189         392\n",
              "6        July    446     191         381\n",
              "7      August    437     164         403\n",
              "8   September    446     193         402\n",
              "9     October    439     173         402\n",
              "10   November    417     134         376\n",
              "11   December    401      89         365"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92fa7d7c-a961-4371-9bcd-f6147d4fe013\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>month</th>\n",
              "      <th>count</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>January</td>\n",
              "      <td>257</td>\n",
              "      <td>62</td>\n",
              "      <td>246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>February</td>\n",
              "      <td>292</td>\n",
              "      <td>70</td>\n",
              "      <td>273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>March</td>\n",
              "      <td>339</td>\n",
              "      <td>139</td>\n",
              "      <td>321</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>April</td>\n",
              "      <td>410</td>\n",
              "      <td>180</td>\n",
              "      <td>347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>May</td>\n",
              "      <td>450</td>\n",
              "      <td>172</td>\n",
              "      <td>383</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>June</td>\n",
              "      <td>460</td>\n",
              "      <td>189</td>\n",
              "      <td>392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>July</td>\n",
              "      <td>446</td>\n",
              "      <td>191</td>\n",
              "      <td>381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>August</td>\n",
              "      <td>437</td>\n",
              "      <td>164</td>\n",
              "      <td>403</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>September</td>\n",
              "      <td>446</td>\n",
              "      <td>193</td>\n",
              "      <td>402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>October</td>\n",
              "      <td>439</td>\n",
              "      <td>173</td>\n",
              "      <td>402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>November</td>\n",
              "      <td>417</td>\n",
              "      <td>134</td>\n",
              "      <td>376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>December</td>\n",
              "      <td>401</td>\n",
              "      <td>89</td>\n",
              "      <td>365</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92fa7d7c-a961-4371-9bcd-f6147d4fe013')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-92fa7d7c-a961-4371-9bcd-f6147d4fe013 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-92fa7d7c-a961-4371-9bcd-f6147d4fe013');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1a040b9d-0c2e-48c8-b10d-44f78b19f5cb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a040b9d-0c2e-48c8-b10d-44f78b19f5cb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1a040b9d-0c2e-48c8-b10d-44f78b19f5cb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_781eda9b-0300-4a53-af69-84b1f6d9ab0a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('month_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_781eda9b-0300-4a53-af69-84b1f6d9ab0a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('month_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "month_df",
              "summary": "{\n  \"name\": \"month_df\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"November\",\n          \"October\",\n          \"January\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67,\n        \"min\": 257,\n        \"max\": 460,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          460,\n          257,\n          417\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47,\n        \"min\": 62,\n        \"max\": 193,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          134,\n          173,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52,\n        \"min\": 246,\n        \"max\": 403,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          392,\n          246,\n          376\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize=(15,10))\n",
        "ax1 = fig.add_subplot(211)\n",
        "sns.lineplot(x='season', y='count', data=yulu, color='green')\n",
        "ax1.set_title('Lineplot for season vs corresponding electric cycle renting counts',fontsize=20)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "A6NhRPAfEAv6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "outputId": "68286853-92d0-483f-9a81-adbe94e54081"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Observations from seasons data.\n",
        "\n",
        "- Users increased renting bikes with the increase of seasons.\n",
        "- Most of their users were seen on fall i.e. season 3.\n",
        "- Least of their users were seen in spring i.e. season1."
      ],
      "metadata": {
        "id": "YSDLauJCDXNC"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "oLczrWs8oogA"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM14z3SwKeYdes80B4Kx78D",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}